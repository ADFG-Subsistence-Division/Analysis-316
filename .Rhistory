'Personal',
'Needed more',
'Regulations',
'Weather / environment',
'More time',
'Equipment',
'Substituted for unavailable resource',
'Store bought too expensive',
'Had more help',
'Travelled further to harvest',
'Resource larger/healthier',
'Other / unspecified'))  %>%
mutate(moreSOrder = row_number()) # %>%
# Below doesn't seem to work when pivoting.
# set up the reasons as factors so that they sort properly.
#mutate(moreReason = factor(moreReason, ordered = TRUE))
# Recode (-) codes for LSM so that they're only -9 for 'missing'.
REC66LSMData <- REC66Data %>%
filter(displayGroup %in% lsmDisplayGroups) %>%
mutate(histUse = if_else(histUse < 0 | is.na(histUse) , -9, histUse)) %>%
# Merge in histUse codes for pivoting later on. -- remove NPS-Specific assessments.
left_join(lsmCodeList, by = c("histUse")) %>%
mutate(hhRept = 1)
lsmCols <- unique(REC66LSMData$histUseDesc)
# Develop 'any resource' code using -1 as the rescode so that we get proper sorting.
REC66LSMAnyData <- REC66LSMData %>%
mutate(resource = -1,
resName = 'Any resource')
# We need to get a count of 'valid responses' - this would be easy except that
#   'any' is also summarized.
validLSMData <- bind_rows(REC66LSMData, REC66LSMAnyData) %>%
mutate(usesRes = if_else(histUse %in% c(1,2,3), 1, 0)) %>%
filter(histUse >= 0) %>%
group_by(projID, studyear, communty,
commname, samphh, resource, resName,
HHID, histUseDesc) %>%
summarize(valid = max(hhRept),
usesRes = max(usesRes)) %>%
summarize(valid = max(valid),
usesRes = max(usesRes)) %>%
summarize(valid = sum(valid),
usesRes = sum(usesRes)) %>%
ungroup()
# Multiple resource may have been offered as being 'needed', remove those and then
#   aggregate to the community level; note that additional work will need to be
#   done for future stratified samples.
lsmTableData <- REC66LSMData %>%
group_by(projID, studyear, communty,
commname, samphh, resource, resName,
histUseDesc, HHID) %>%
summarize(hhRept = max(hhRept, na.rm=TRUE)) %>%
summarize(number = sum(hhRept, na.rm=TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = histUseDesc,
values_from = number,
names_sort = TRUE) #%>%
#rename(DontUse = `Never harvest/ don't use`)
lsmFrequencyData <- REC66LSMData %>%
group_by(projID, studyear, communty,
commname, samphh,
histUseDesc, HHID, resource) %>%
filter(resource > 0) %>%
summarize(hhRept = max(hhRept, na.rm=TRUE)) %>%
summarize(number = sum(hhRept, na.rm=TRUE)) %>%
ungroup() %>%
pivot_wider(names_from = histUseDesc,
values_from = number,
names_sort = TRUE)
REC66LSMAnyData <- REC66LSMAnyData %>%
group_by(projID, studyear, communty,
commname, samphh, resource, resName,
histUseDesc, HHID) %>%
summarize(hhRept = max(hhRept, na.rm=TRUE)) %>%
summarize(number = sum(hhRept, na.rm=TRUE)) %>%
ungroup() %>%
pivot_wider(names_from=histUseDesc,
values_from=number,
names_sort=TRUE)
lsmTableData <- bind_rows(REC66LSMAnyData, lsmTableData) %>%
arrange(projID, studyear, communty, communty, resource) %>%
left_join(validLSMData,
by = c('projID', 'studyear', 'communty',
'commname', 'samphh', 'resource',
'resName'))
# Clean up the table a little for readability.
tableOutData <- select(lsmTableData, -projID, -studyear, -communty,
-resource)
tableOut <- kable(tableOutData,
)
print(tableOut)
# Remove split 'More' and 'Less' into separate data frames for processing of
#   reasons.
# If histUse is less or more, then we will ensure that the first
#  reason is at least -9; rows for reason code 2 will be removed
#  after files are stacked in a later step.
REC66LSMData$whyDiffCD1[which(REC66LSMData$histUse == 1 & is.na(REC66LSMData$whyDiffCD1))] = -9
REC66LSMData$whyDiffCD1[which(REC66LSMData$histUse == 3 & is.na(REC66LSMData$whyDiffCD1))] = -9
REC66LSMData$whyDiffCD1[which(REC66LSMData$histUse == 1 & REC66LSMData$whyDiffCD1 < 0)] = -9
REC66LSMData$whyDiffCD1[which(REC66LSMData$histUse == 3 & REC66LSMData$whyDiffCD1 < 0)] = -9
# 'Missing' cannot be a second reason code; also if a 0 worked it's way in, let's
#   also make sure that's handled properly.
REC66LSMData$whyDiffCD2[which(REC66LSMData$histUse == 1 & REC66LSMData$whyDiffCD2 < 1)] = NA
REC66LSMData$whyDiffCD2[which(REC66LSMData$histUse == 3 & REC66LSMData$whyDiffCD2 < 1)] = NA
# Make an 'any resource'
REC66AnyData <- REC66Data
REC66AnyData$resource = -1
REC66AnyData$resName = 'Any resource'
REC66ReasonData <- dplyr::bind_rows(REC66AnyData, REC66LSMData)
# Ensure that all resource categories asked about pop-up on the output data.
keyData <- distinct(REC66ReasonData, projID, studyear, communty,
commname, samphh, resource, resName) %>%
arrange(projID, studyear, communty,
commname, samphh, resource, resName)
REC66LessData <- filter(REC66ReasonData, histUse == 1)
REC66LessData$lessUse = 1
REC66LessData$validReason = 1
REC66LessData$validReason[which(REC66LessData$whyDiffCD1 == -9)] = 0
# Get to HH level first to avoid duplicate rows from 'resources needed'
validLessReasonData <- group_by(REC66LessData, projID, studyear, communty,
commname, resource, resName, HHID) %>%
summarize(lessUse = max(lessUse),
validReason = max(validReason)) %>%
summarize(lessUse = sum(lessUse),
validReason = sum(validReason)) %>%
ungroup()
lessReason1Data <- select(REC66LessData, projID, studyear, communty,
commname, samphh, resource, resName, HHID, lessUse,
whyDiffCD1) %>%
ungroup() %>%
rename(reasonCD = whyDiffCD1)
lessReason2Data <- select(REC66LessData, projID, studyear, communty,
commname, resource, resName, HHID, lessUse,
whyDiffCD2) %>%
ungroup() %>%
rename(reasonCD = whyDiffCD2) %>%
filter(!is.na(reasonCD))
# Combine and ensure there aren't duplicate reason codes, then
#    merge and pivot.
# First do some things to make sure we get stuff in the right order.
lessReasonsData <- dplyr::bind_rows(lessReason1Data, lessReason2Data) %>%
left_join(lsmReasonLessList, by=c("reasonCD")) %>%
group_by(projID, studyear, communty,
commname, resource, resName, lessReason, HHID) %>%
summarize(lessUse = max(lessUse)) %>%
summarize(lessUse = sum(lessUse)) %>%
ungroup() %>%
pivot_wider(names_from=lessReason,
values_from=lessUse,
names_sort=TRUE) %>%
select(projID, studyear, communty,
commname, resource, resName,
any_of(lsmReasonLessList$lessReason))
lessReasonsData <- left_join(validLessReasonData, lessReasonsData,
by=c('projID', 'studyear', 'communty',
'commname', 'resource', 'resName'))
lessReasonsData <- left_join(keyData, lessReasonsData, by=c('projID', 'studyear', 'communty',
'commname', 'resource', 'resName'))
tableOut <- kbl(lessReasonsData,
caption=formatTableHeader(str_interp("Reasons for less harvest, ${studyear}."))) %>%
kable_styling(full_width = F)
print(tableOut)
REC66MoreData <- filter(REC66ReasonData, histUse == 3)
REC66MoreData$moreUse = 1
REC66MoreData$validReason = 1
REC66MoreData$validReason[which(REC66MoreData$whyDiffCD1 == -9)] = 0
# Get to HH level first to avoid duplicate rows from 'resources needed'
validMoreReasonData <- group_by(REC66MoreData, projID, studyear, communty,
commname, resource, resName, HHID) %>%
summarize(moreUse = max(moreUse),
validReason = max(validReason)) %>%
summarize(moreUse = sum(moreUse),
validReason = sum(validReason)) %>%
ungroup()
moreReason1Data <- select(REC66MoreData, projID, studyear, communty,
commname, resource, resName, HHID, moreUse,
whyDiffCD1) %>%
ungroup() %>%
rename(reasonCD = whyDiffCD1)
moreReason2Data <- select(REC66MoreData, projID, studyear, communty,
commname, resource, resName, HHID, moreUse,
whyDiffCD2) %>%
ungroup() %>%
rename(reasonCD = whyDiffCD2) %>%
filter(!is.na(reasonCD))
# Combine and ensure there aren't duplicate reason codes, then
#    merge and pivot.
moreReasonsData <- dplyr::bind_rows(moreReason1Data, moreReason2Data) %>%
left_join(lsmReasonMoreList, by=c("reasonCD")) %>%
group_by(projID, studyear, communty,
commname, resource, resName, moreReason, HHID) %>%
summarize(moreUse = max(moreUse)) %>%
summarize(moreUse = sum(moreUse)) %>%
ungroup() %>%
pivot_wider(names_from=moreReason,
values_from=moreUse,
names_sort=TRUE) %>%
select(projID, studyear, communty,
commname, resource, resName,
any_of(lsmReasonMoreList$moreReason))
moreReasonsData <- left_join(validMoreReasonData, moreReasonsData,
by=c('projID', 'studyear', 'communty',
'commname', 'resource', 'resName'))
moreReasonsData <- left_join(keyData, moreReasonsData, by=c('projID', 'studyear', 'communty',
'commname', 'resource', 'resName'))
tableOut <- kbl(moreReasonsData,
caption=formatTableHeader(str_interp("Reasons for more use, ${studyear}."))) %>%
kable_styling(full_width = F)
print(tableOut)
combinations <- moreReasonsData %>% ungroup() %>%
select(commname, studyear) %>%
distinct()
moreReasonsHeat <-
moreReasonsData %>%
pivot_longer(cols = c(10:ncol(.)),
names_to = "moreReason",
values_to = "numResponses") %>%
mutate(numResponses = if_else(is.na(numResponses),0,numResponses)) %>%
group_by(resName) %>%
mutate(
row_max = max(numResponses, na.rm = TRUE),
fill_alpha = ifelse(row_max == 0, NA, numResponses / row_max),
fill_col = if_else(fill_alpha == 0, NA, scales::alpha("red", fill_alpha)),
text_col = if_else(is.na(fill_col), "lightgray","black")
)
pwalk(
.l = combinations,
.f = function(commname_val, studyear_val) {
df_filt <- moreReasonsHeat %>% filter(commname == commname_val, studyear == studyear_val)
print(df_filt)
plotOut <- ggplot(df_filt, aes(x = moreReason,
y = as.factor(resName))) +
geom_tile(aes(fill = fill_col,
alpha = fill_alpha),
color = "white", na.rm = TRUE) +
geom_text(aes(label = numResponses,
color = text_col),
family = "serif",
size = 10,
size.unit = "pt") +
scale_fill_identity(guide = "none") +
scale_color_identity(guide = "none") +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
scale_y_discrete(drop = FALSE) +
labs(x = "Reasons for more use",
y = "Resource name",
title = paste0("Reasons given for more use by resource category, ",commname_val,", ",studyear_val)) +
theme_minimal(base_size = 12, base_family = "serif") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0))
print(plotOut)
}
)
lessReasonsHeat <-
lessReasonsData %>%
pivot_longer(cols = c(10:ncol(.)),
names_to = "lessReason",
values_to = "numResponses") %>%
mutate(numResponses = if_else(is.na(numResponses),0,numResponses)) %>%
group_by(resName) %>%
mutate(
row_max = max(numResponses, na.rm = TRUE),
fill_alpha = ifelse(row_max == 0, NA, numResponses / row_max),
fill_col = if_else(fill_alpha == 0, NA, scales::alpha("red", fill_alpha)),
text_col = if_else(is.na(fill_col), "lightgray","black")
)
pwalk(
.l = combinations,
.f = function(commname_val, studyear_val) {
df_filt <- lessReasonsHeat %>% filter(commname == commname_val, studyear == studyear_val)
print(df_filt)
plotOut <- ggplot(df_filt, aes(x = lessReason,
y = as.factor(resName))) +
geom_tile(aes(fill = fill_col,
alpha = fill_alpha),
color = "white", na.rm = TRUE) +
geom_text(aes(label = numResponses,
color = text_col),
family = "serif",
size = 10,
size.unit = "pt") +
scale_fill_identity(guide = "none") +
scale_color_identity(guide = "none") +
scale_x_discrete(labels = function(x) str_wrap(x, width = 10)) +
scale_y_discrete(drop = FALSE) +
labs(x = "Reasons for less use",
y = "Resource name",
title = paste0("Reasons given for less use by resource category, ",commname_val,", ",studyear_val)) +
theme_minimal(base_size = 12, base_family = "serif") +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid = element_blank(),
legend.position = "none",
plot.title = element_text(hjust = 0))
print(plotOut)
}
)
# Recode (-) codes to provide only one 'unknown' column rather than multiples.
REC66EnoughData <- REC66Data %>%
filter(displayGroup %in% lsmDisplayGroups) %>%
mutate(
validEnough = if_else(histUse <= 0, 0, 1), # If resource wasn't used, not a valid response
validEnough = if_else(getEnough %in% c(0, 1), 1, validEnough), # If HH got enough or did not get enough, valid response
impact = if_else(impact < 0 | is.na(impact), -9, impact), # If impact wasn't given, -9 it
# Provide an additional impact code to distinguish between 'no use' and missing.
impact = if_else(histUse == 0, -10, impact)
)
# Develop 'any resource' code using -1 as the rescode so that we get proper sorting.
REC66EnoughAnyData <- REC66EnoughData %>%
mutate(resource = -1,
resName = 'Any resource')
REC66EnoughData <- bind_rows(REC66EnoughData, REC66EnoughAnyData) %>%
mutate(notEnough = case_when(getEnough == 0 ~ 1,
getEnough == 1 ~ 0,
TRUE ~ NA))
# Set instances of NA for impact to -9 if enough has been marked as 0.
REC66EnoughData$impact[which(REC66EnoughData$notEnough == 1 & is.na(REC66EnoughData$impact))] = -9
# Get enough has to be tabulated separately from impact to simplify the pivot.
tmpREC66ImpactData <- select(REC66EnoughData, projID, studyear, communty,
commname, resource, resName,
impact, HHID)
# Impacts for 'not enough' only, and also omit 'any' and 'overall' - these are not particularly insightful.
tmpREC66ImpactFrequencyData <- select(REC66EnoughData, projID, studyear, communty,
commname, resource, resName,
notEnough, impact, HHID) %>%
filter(resource > 0 & notEnough == 1)
# Add in no-use for frequency summaries.
REC66EnoughData <- REC66EnoughData %>%
mutate(noUse = if_else(histUse == 0, 1, 0)) %>%
select(projID, studyear, communty,
commname, resource, resName, noUse, validEnough, getEnough,
notEnough, HHID)
tmpREC66EnoughFrequencyData <- REC66EnoughData %>%
filter(resource > 0)
REC66EnoughData <- REC66EnoughData %>%
filter(!is.na(validEnough),
!is.na(getEnough),
!is.na(notEnough)) %>%
group_by(projID, studyear, communty,
commname, resource, resName, HHID) %>%
summarize(validEnough = sum(validEnough, na.rm=TRUE),
getEnough = sum(getEnough, na.rm=TRUE),
notEnough = sum(notEnough, na.rm=TRUE)) %>%
mutate(across(all_of(c("validEnough","getEnough","notEnough")),
~ case_when(resName %in% c("Any resource", "All resources") & . >= 1 ~ 1,
TRUE ~ .))) %>%
group_by(projID, studyear, communty, commname, resource, resName) %>%
summarize(validEnough = sum(validEnough, na.rm=TRUE),
getEnough = sum(getEnough, na.rm=TRUE),
notEnough = sum(notEnough, na.rm=TRUE)) %>%
ungroup()
tmpREC66ImpactData$number = 1
REC66ImpactData <- left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact")) %>%
group_by(projID, studyear, communty,
commname, resource, resName, impactDesc, HHID) %>%
summarize(number = max(number, na.rm=TRUE)) %>%
summarize(number = sum(number, na.rm=TRUE)) %>%
ungroup() %>%
filter(!is.na(impactDesc)) %>%
pivot_wider(names_from="impactDesc", values_from="number",
names_sort=TRUE)
getEnoughTableData <- left_join(keyData, REC66EnoughData, by=c('projID', 'studyear', 'communty',
'commname', 'resource', 'resName')) %>%
left_join(REC66ImpactData, by=c('projID', 'studyear', 'communty',
'commname', 'resource', 'resName')) %>%
select(projID, studyear, communty, commname, samphh, resource, resName,
any_of(c('validEnough', 'getEnough', 'notEnough', 'Do Not Use',
'Missing', 'Not noticable', 'Minor',
'Moderate', 'Major', 'Severe')))
# ##############################################################
# Calculate frequencies - Number of categories reported per HH
# ##############################################################
# Get to HHID/Resource (one row per), then sum # resources per HH. This will
#   stay at the HH level in order to produce box and whisker plots.
REC66EnoughFrequencyData <- tmpREC66EnoughFrequencyData %>%
mutate(getEnough = if_else(getEnough == -9, NA, getEnough)) %>%
group_by(projID, studyear, communty,
commname, HHID, resource) %>%
summarize(getEnough = max(getEnough, na.rm=TRUE),
noUse = max(noUse, na.rm=TRUE),
notEnough = max(notEnough, na.rm=TRUE)) %>%
mutate(across(everything(), ~replace(.x, .x == -Inf, NA))) %>%
summarize(getEnough = sum(getEnough, na.rm=TRUE),
noUse = sum(noUse, na.rm=TRUE),
notEnough = sum(notEnough, na.rm=TRUE)) %>%
ungroup()
tmpREC66ImpactFrequencyData$number = 1
REC66ImpactFrequencyData <- left_join(tmpREC66ImpactFrequencyData, impactCodeList,
by=c("impact"))
REC66ImpactFrequencyData <- REC66ImpactFrequencyData %>%
group_by(projID, studyear, communty,
commname, impactDesc, HHID, resource) %>%
summarize(number = max(number, na.rm=TRUE)) %>%
summarize(number = sum(number, na.rm=TRUE)) %>%
ungroup() %>%
mutate(across(everything(), ~replace(.x, .x == -Inf, NA))) %>%
filter(!is.na(impactDesc)) %>%
pivot_wider(names_from="impactDesc",
values_from="number",
names_sort = TRUE) %>%
select(projID, studyear, communty, commname, HHID,
any_of(c("Missing", "Not noticable", "Minor",
"Moderate", "Major", "Severe")))
# Enforce 0-values in the pivoted data; because we know what the first 5 values ought
#   to be we can just skip those - they shouldn't be blank at this point.
for(ii in 5:length(REC66ImpactFrequencyData))
{
REC66ImpactFrequencyData[which(is.na(REC66ImpactFrequencyData[,ii])),ii] = 0
}
# Don't combine files.
tableOut <- kbl(getEnoughTableData,
caption=formatTableHeader(str_interp("Households reporting not getting enough and impacts, ${studyear}."))) %>%
kable_styling(full_width = F)
print(tableOut)
left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact")) %>%
group_by(projID, studyear, communty,
commname, resource, resName, impactDesc, HHID) %>%
summarize(number = max(number, na.rm=TRUE)) %>%
summarize(number = sum(number, na.rm=TRUE)) %>%
ungroup() %>%
filter(!is.na(impactDesc)) %>%
pivot_wider(names_from="impactDesc", values_from="number",
names_sort=TRUE)
left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact"))
REC66ImpactFrequencyData %>%
group_by(projID, studyear, communty,
commname, impactDesc, HHID, resource) %>%
summarize(number = max(number, na.rm=TRUE)) %>%
summarize(number = sum(number, na.rm=TRUE)) %>%
ungroup() %>%
mutate(across(everything(), ~replace(.x, .x == -Inf, NA))) %>%
filter(!is.na(impactDesc)) %>%
pivot_wider(names_from="impactDesc",
values_from="number",
names_sort = TRUE)
left_join(tmpREC66ImpactFrequencyData, impactCodeList,
by=c("impact")) %>%
group_by(projID, studyear, communty,
commname, impactDesc, HHID, resource) %>%
summarize(number = max(number, na.rm=TRUE)) %>%
summarize(number = sum(number, na.rm=TRUE)) %>% V
left_join(tmpREC66ImpactFrequencyData, impactCodeList,
by=c("impact")) %>%
group_by(projID, studyear, communty,
commname, impactDesc, HHID, resource) %>%
summarize(number = max(number, na.rm=TRUE)) %>%
summarize(number = sum(number, na.rm=TRUE)) %>% View()
left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact")) %>%
group_by(projID, studyear, communty,
commname, resource, resName, impactDesc, HHID) %>%
summarize(number = max(number, na.rm=TRUE)) %>%
summarize(number = sum(number, na.rm=TRUE)) %>% View()
left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact")) %>%
group_by(projID, studyear, communty,
commname, resource, resName, impactDesc, HHID) %>%
summarize(number = max(number, na.rm=TRUE)) %>%View()
left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact")) %>%
group_by(projID, studyear, communty,
commname, resource, resName, impactDesc) %>%
summarize(number = n()) %>% View()
left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact"))
left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact")) %>% View()
left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact")) %>%
group_by(projID, studyear, communty,
commname, resource, resName, impactDesc, HHID) %>%
summarize(number = max(number, na.rm=TRUE)) %>% View()
left_join(tmpREC66ImpactData, impactCodeList,
by=c("impact")) %>%
group_by(projID, studyear, communty,
commname, resource, resName, impactDesc, HHID) %>%
summarize(number = max(number, na.rm=TRUE)) %>%
summarize(number = sum(number, na.rm=TRUE)) %>%View()
REC66EnoughData <- REC66Data %>%
filter(displayGroup %in% lsmDisplayGroups) %>%
mutate(
validEnough = if_else(histUse <= 0, 0, 1), # If resource wasn't used, not a valid response
validEnough = if_else(getEnough %in% c(0, 1), 1, validEnough), # If HH got enough or did not get enough, valid response
impact = if_else(impact < 0 | is.na(impact), -9, impact), # If impact wasn't given, -9 it
# Provide an additional impact code to distinguish between 'no use' and missing.
impact = if_else(histUse == 0, -10, impact)
)
# Develop 'any resource' code using -1 as the rescode so that we get proper sorting.
REC66EnoughAnyData <- REC66EnoughData %>%
mutate(resource = -1,
resName = 'Any resource')
REC66EnoughData <- bind_rows(REC66EnoughData, REC66EnoughAnyData) %>%
mutate(notEnough = case_when(getEnough == 0 ~ 1,
getEnough == 1 ~ 0,
TRUE ~ NA))
# Set instances of NA for impact to -9 if enough has been marked as 0.
REC66EnoughData$impact[which(REC66EnoughData$notEnough == 1 & is.na(REC66EnoughData$impact))] = -9
# Get enough has to be tabulated separately from impact to simplify the pivot.
tmpREC66ImpactData <- select(REC66EnoughData, projID, studyear, communty,
commname, resource, resName,
impact, HHID)
# Impacts for 'not enough' only, and also omit 'any' and 'overall' - these are not particularly insightful.
tmpREC66ImpactFrequencyData <- select(REC66EnoughData, projID, studyear, communty,
commname, resource, resName,
notEnough, impact, HHID) %>%
filter(resource > 0 & notEnough == 1)
View(tmpREC66ImpactFrequencyData)
