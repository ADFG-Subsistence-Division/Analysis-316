#           annotate("text", x=ii, y=tmpAmt+margin,
#                     label=tmpAmt, hjust=lrAlign, angle=0)
#   }
plotOut = plotOut +
geom_text(
data = tmpFigLabels,
aes(x = resName, y = margin, label = labelValue),
vjust = -0.5, # position above the bar
fontface = "bold"
) +
ylab("Number of sampled households") +
xlab("Mode of transportation") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
}
# ggplot
plotOut <- ggplot(tmpFigData, aes(x= reorder(resName, desc(number)), y=number)) +
ggtitle(str_interp("Use of transportation to access resources, ${comm}, ${studyear}")) +
geom_col(aes(fill = method), width=0.7) +
scale_fill_manual(values = colrs) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
geom_text(
data = tmpFigLabels,
aes(x = resName, y = margin, label = labelValue),
vjust = -0.5, # position above the bar
fontface = "bold"
) +
ylab("Number of sampled households") +
xlab("Mode of transportation") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
# ggplot
plotOut <- ggplot(tmpFigData, aes(x= reorder(resName, desc(number)), y=number)) +
ggtitle(str_interp("Use of transportation to access resources, ${comm}, ${studyear}")) +
geom_col(aes(fill = method), width=0.7) +
scale_fill_manual(values = colrs) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
geom_text(
data = tmpFigLabels,
aes(x = resName, y = margin, label = labelValue),
vjust = -0.5, # position above the bar
fontface = "bold"
) +
ylab("Number of sampled households") +
xlab("Mode of transportation") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
# ggplot
plotOut <- ggplot(tmpFigData, aes(x= reorder(resName, desc(number)), y=number)) +
ggtitle(str_interp("Use of transportation to access resources, ${comm}, ${studyear}")) +
geom_col(aes(fill = method), width=0.7) +
scale_fill_manual(values = colrs) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
geom_text(
data = tmpFigLabels,
aes(x = resName, y = margin, label = labelValue),
vjust = -0.5, # position above the bar
size = 10,
size.unit = "pt",
family = "serif"
) +
ylab("Number of sampled households") +
xlab("Mode of transportation") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
# Just a simple bar chart to display the motorized equipment percentages.
tmpMotorFigData <- motorData %>% ungroup()
# Calculate percentages.
tmpMotorFigData$resYN_pct = tmpMotorFigData$resYN/tmpMotorData$samphh
for(comm in commnameList$commname)
{
tmpFigData <- filter(tmpMotorFigData, commname == comm)  %>%
select(resName, resYN_pct)
# Start with initial plot information.
colrs <- getColors("Spectral")
labelOrder = c("Generator", "Chainsaw", "Ice auger", "Winch", "Other")
plotOut <- ggplot(tmpFigData, aes(x=factor(resName, labelOrder), y=resYN_pct, fill = resName)) +
ggtitle(str_interp("Portable motorized equipment used while harvesting resources, ${comm}, ${studyear}")) +
geom_col() +
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
scale_fill_manual(values = getColors(n = length(tmpFigData$resName)),
name = "") +
geom_text(aes(x = resName, y = resYN_pct+0.1, label = resYN_pct),
vjust = -0.5, # position above the bar
size = 10,
size.unit = "pt",
family = "serif") +
ylab("Percentage of sampled households") +
xlab("Equipment") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
}
# Just a simple bar chart to display the motorized equipment percentages.
tmpMotorFigData <- motorData %>% ungroup()
# Calculate percentages.
tmpMotorFigData$resYN_pct = tmpMotorFigData$resYN/tmpMotorData$samphh
for(comm in commnameList$commname)
{
tmpFigData <- filter(tmpMotorFigData, commname == comm)  %>%
select(resName, resYN_pct)
# Start with initial plot information.
colrs <- getColors("Spectral")
labelOrder = c("Generator", "Chainsaw", "Ice auger", "Winch", "Other")
plotOut <- ggplot(tmpFigData, aes(x=factor(resName, labelOrder), y=resYN_pct, fill = resName)) +
ggtitle(str_interp("Portable motorized equipment used while harvesting resources, ${comm}, ${studyear}")) +
geom_col() +
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
scale_fill_manual(values = getColors(n = length(tmpFigData$resName)),
name = "") +
geom_text(aes(x = resName, y = resYN_pct+0.01, label = scales::percent(resYN_pct)),
vjust = -0.5, # position above the bar
size = 10,
size.unit = "pt",
family = "serif") +
ylab("Percentage of sampled households") +
xlab("Equipment") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
}
plotOut <- ggplot(tmpFigData, aes(x=factor(resName, labelOrder), y=resYN_pct, fill = resName)) +
ggtitle(str_interp("Portable motorized equipment used while harvesting resources, ${comm}, ${studyear}")) +
geom_col() +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), scales::percent_format()) +
scale_fill_manual(values = getColors(n = length(tmpFigData$resName)),
name = "") +
geom_text(aes(x = resName,
y = resYN_pct+0.01,
label = scales::percent(resYN_pct)),
vjust = -0.5, # position above the bar
size = 10,
size.unit = "pt",
family = "serif") +
ylab("Percentage of sampled households") +
xlab("Equipment") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
# Just a simple bar chart to display the motorized equipment percentages.
tmpMotorFigData <- motorData %>% ungroup()
# Calculate percentages.
tmpMotorFigData$resYN_pct = tmpMotorFigData$resYN/tmpMotorData$samphh
for(comm in commnameList$commname)
{
tmpFigData <- filter(tmpMotorFigData, commname == comm)  %>%
select(resName, resYN_pct)
# Start with initial plot information.
colrs <- getColors("Spectral")
labelOrder = c("Generator", "Chainsaw", "Ice auger", "Winch", "Other")
plotOut <- ggplot(tmpFigData, aes(x=factor(resName, labelOrder), y=resYN_pct, fill = resName)) +
ggtitle(str_interp("Portable motorized equipment used while harvesting resources, ${comm}, ${studyear}")) +
geom_col() +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), scales::percent_format()) +
scale_fill_manual(values = getColors(n = length(tmpFigData$resName)),
name = "") +
geom_text(aes(x = resName,
y = resYN_pct+0.01,
label = scales::percent(resYN_pct)),
vjust = -0.5, # position above the bar
size = 10,
size.unit = "pt",
family = "serif") +
ylab("Percentage of sampled households") +
xlab("Equipment") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
# Just a simple bar chart to display the motorized equipment percentages.
tmpMotorFigData <- motorData %>% ungroup()
# Calculate percentages.
tmpMotorFigData$resYN_pct = tmpMotorFigData$resYN/tmpMotorData$samphh
for(comm in commnameList$commname)
{
tmpFigData <- filter(tmpMotorFigData, commname == comm)  %>%
select(resName, resYN_pct)
# Start with initial plot information.
colrs <- getColors("Spectral")
labelOrder = c("Generator", "Chainsaw", "Ice auger", "Winch", "Other")
plotOut <- ggplot(tmpFigData, aes(x=factor(resName, labelOrder), y=resYN_pct, fill = resName)) +
ggtitle(str_interp("Portable motorized equipment used while harvesting resources, ${comm}, ${studyear}")) +
geom_col() +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), scales::percent_format())) +
scale_fill_manual(values = getColors(n = length(tmpFigData$resName)),
name = "") +
geom_text(aes(x = resName,
y = resYN_pct+0.01,
label = scales::percent(resYN_pct)),
vjust = -0.5, # position above the bar
size = 10,
size.unit = "pt",
family = "serif") +
ylab("Percentage of sampled households") +
xlab("Equipment") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
}
# Just a simple bar chart to display the motorized equipment percentages.
tmpMotorFigData <- motorData %>% ungroup()
# Calculate percentages.
tmpMotorFigData$resYN_pct = tmpMotorFigData$resYN/tmpMotorData$samphh
for(comm in commnameList$commname)
{
tmpFigData <- filter(tmpMotorFigData, commname == comm)  %>%
select(resName, resYN_pct)
# Start with initial plot information.
colrs <- getColors("Spectral")
labelOrder = c("Generator", "Chainsaw", "Ice auger", "Winch", "Other")
plotOut <- ggplot(tmpFigData, aes(x=factor(resName, labelOrder), y=resYN_pct, fill = resName)) +
ggtitle(str_interp("Portable motorized equipment used while harvesting resources, ${comm}, ${studyear}")) +
geom_col() +
scale_y_continuous(expand = expansion(mult = c(0, 0.1), label=scales::percent_format())) +
scale_fill_manual(values = getColors(n = length(tmpFigData$resName)),
name = "") +
geom_text(aes(x = resName,
y = resYN_pct+0.01,
label = scales::percent(resYN_pct)),
vjust = -0.5, # position above the bar
size = 10,
size.unit = "pt",
family = "serif") +
ylab("Percentage of sampled households") +
xlab("Equipment") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
}
# Just a simple bar chart to display the motorized equipment percentages.
tmpMotorFigData <- motorData %>% ungroup()
# Calculate percentages.
tmpMotorFigData$resYN_pct = tmpMotorFigData$resYN/tmpMotorData$samphh
for(comm in commnameList$commname)
{
tmpFigData <- filter(tmpMotorFigData, commname == comm)  %>%
select(resName, resYN_pct)
# Start with initial plot information.
colrs <- getColors("Spectral")
labelOrder = c("Generator", "Chainsaw", "Ice auger", "Winch", "Other")
plotOut <- ggplot(tmpFigData, aes(x=factor(resName, labelOrder), y=resYN_pct, fill = resName)) +
ggtitle(str_interp("Portable motorized equipment used while harvesting resources, ${comm}, ${studyear}")) +
geom_col() +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)),
labels = scales::percent_format()) +
scale_fill_manual(values = getColors(n = length(tmpFigData$resName)),
name = "") +
geom_text(aes(x = resName,
y = resYN_pct+0.01,
label = scales::percent(resYN_pct)),
vjust = -0.5, # position above the bar
size = 10,
size.unit = "pt",
family = "serif") +
ylab("Percentage of sampled households") +
xlab("Equipment") +
themeSubs(base_size = 10) +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
}
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("/R-Code", pattern = "\\.html?$", recursive = TRUE, full.names = TRUE)
library(pagedown)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("/R-Code", pattern = "\\.html?$", recursive = TRUE, full.names = TRUE)
getwd()
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("./R-Code", pattern = "\\.html?$", recursive = TRUE, full.names = TRUE)
html_files <- list.files("/R-Code", pattern = "\\.html?$", recursive = TRUE, full.names = TRUE)
html_files <- list.files(paste0(getwd(),"/R-Code"), pattern = "\\.html?$", recursive = TRUE, full.names = TRUE)
all_html <- sapply(html_files, readLines, warn = FALSE)
all_html_combined <- unlist(all_html)
paste0(getwd(),"/R-Code")
html_files <- list.files(paste0(getwd(),"/R-Code/"), pattern = "\\.html?$", recursive = TRUE, full.names = TRUE)
paste0(getwd(),"/R-Code/")
dir.exists(paste0(getwd(), "/R-Code"))
# Should return TRUE
list.files(paste0(getwd(), "/R-Code"), recursive = TRUE, full.names = TRUE)
# Do you see your HTML files listed here?
html_files <- list.files(
paste0(getwd(), "/R-Code"),
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE,
ignore.case = TRUE
)
html_files <- list.files(
"R-Code",
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE,
ignore.case = TRUE
)
html_files <- html_files[c(3:length(html_files))]
all_html <- sapply(html_files, readLines, warn = FALSE)
html_files
html_files <- list.files(
"./R-Code",
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE,
ignore.case = TRUE
)
html_files <- list.files(
"/R-Code",
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE,
ignore.case = TRUE
)
html_files <- list.files(
"R-Code",
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE,
ignore.case = TRUE
)
getwd()
html_files <- list.files(
paste0(getwd(), "/R-Code"),
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE,
ignore.case = TRUE
)
library(pagedown)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("../R-Code", pattern = "\\.html?$", recursive = TRUE, full.names = TRUE)
library(pagedown)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("../R-Code", pattern = "\\.html?$", recursive = TRUE, full.names = TRUE)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("../R-Code",
# pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("/R-Code",
# pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("R-Code",
# pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("./R-Code",
# pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE)
getwd()
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("R-Code",
# pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("R-Code",
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("R-Code",
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE,
ignore.case = TRUE)
list.files(paste0(getwd(), "/R-Code"), recursive = TRUE, full.names = TRUE)
# Do you see your HTML files listed here?
dir.exists(paste0(getwd(), "/R-Code"))
# Should return TRUE
list.files(paste0(getwd(), "/R-Code"), recursive = TRUE, full.names = TRUE)
list.files(paste0(getwd(), "/R-Code"), recursive = TRUE, full.names = TRUE)
rmd_dir <- dirname(normalizePath(knitr::current_input()))
require(knitr)
rmd_dir <- dirname(normalizePath(knitr::current_input()))
library(pagedown)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("../R-Code", pattern = "\\.html?$", recursive = TRUE, full.names = TRUE)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files("/R-Code",
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files(paste0(getwd(),"/R-Code"),
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files(paste0(getwd(),"/R-Code"),
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE) %>%
slice(3:length(.))
library(tidyverse)
# Replace 'your/folder/path' with your top-level directory
html_files <- list.files(paste0(getwd(),"/R-Code"),
pattern = "\\.html?$",
recursive = TRUE,
full.names = TRUE) %>%
slice(3:length(.))
html_files <- html_files[c(3:length(html_files))]
all_html <- sapply(html_files, readLines, warn = FALSE)
all_html_combined <- unlist(all_html)
# Write to a temporary combined file
writeLines(all_html_combined, "combined.html")
# Print to PDF
chrome_print("combined.html", output = "combined.pdf")
rmd_files <- list.files(paste0(getwd(),"/R-Code"),
pattern = "\\.Rmd?$",
recursive = TRUE,
full.names = TRUE)
rmd_files
all_pdfs <- sapply(rmd_files, rmarkdown::render, output_format = "pdf_document")
rmd_files <- list.files(paste0(getwd(),"/R-Code"),
pattern = "\\.Rmd?$",
recursive = TRUE,
full.names = TRUE)
all_pdfs <- sapply(rmd_files, rmarkdown::render, output_format = "pdf_document")
list.files(paste0(getwd(),"/R-Code"),
pattern = "\\.Rmd?$",
recursive = TRUE,
full.names = TRUE) %>% as_tibble()
rmd_files <- list.files(paste0(getwd(),"/R-Code"),
pattern = "\\.Rmd?$",
recursive = TRUE,
full.names = TRUE) %>%
as_tibble() %>%
filter(!str_detect(value, "ZX2")) %>%
pull(value)
rmd_files
all_pdfs <- sapply(rmd_files, rmarkdown::render, output_format = "pdf_document")
rmd_files <- list.files(paste0(getwd(),"/R-Code"),
pattern = "\\.Rmd?$",
recursive = TRUE,
full.names = TRUE) %>%
as_tibble() %>%
filter(!str_detect(value, "ZX2|A00")) %>%
pull(value)
all_pdfs <- sapply(rmd_files, rmarkdown::render, output_format = "pdf_document")
install.packages("pdflatex")
install.packages("tinytex")
install.packages("tinytex")
library(tinytex)
library(tidyverse)
rmd_files <- list.files(paste0(getwd(),"/R-Code/"),
pattern = "\\.Rmd?$",
recursive = TRUE,
full.names = TRUE) %>%
as_tibble() %>%
filter(str_detect(value, "Step 3|Step 4|Step 5|Step 6")) %>%
pull(value)
rmd_files
all_pdfs <- sapply(rmd_files, rmarkdown::render, output_format = "pdf_document")
rmd_files <- list.files(paste0(getwd(),"/R-Code/"),
pattern = "\\.Rmd?$",
recursive = TRUE,
full.names = TRUE) %>%
as_tibble() %>%
filter(str_detect(value, "Step 3|Step 4|Step 5|Step 6")) %>%
pull(value)
library(tinytex)
library(tidyverse)
rmd_files <- list.files(paste0(getwd(),"/R-Code/"),
pattern = "\\.Rmd?$",
recursive = TRUE,
full.names = TRUE) %>%
as_tibble() %>%
filter(str_detect(value, "Step 3|Step 4|Step 5|Step 6")) %>%
pull(value)
all_pdfs <- sapply(rmd_files, rmarkdown::render, output_format = "pdf_document")
tinytex::install_tinytex()
library(tinytex)
all_pdfs <- sapply(rmd_files, rmarkdown::render, output_format = "pdf_document")
