lease = sum(lease, na.rm = TRUE),
charter = sum(charter,na.rm = TRUE),
ride = sum(ride,na.rm = TRUE),
missing = sum(missing, na.rm = TRUE))
tempTransData <- transData
transList = c("own", "borrow", "lease", "charter", "ride")
# Calculate percentages and ensure NA gets turned to 0.
tempTransData$resYN_pct = tempTransData$resYN/tempTransData$samphh
tempTransData$own_pct = tempTransData$own/tempTransData$resYN
tempTransData$borrow_pct = tempTransData$borrow/tempTransData$resYN
tempTransData$lease_pct = tempTransData$lease/tempTransData$resYN
tempTransData$charter_pct = tempTransData$charter/tempTransData$resYN
tempTransData$ride_pct = tempTransData$ride/tempTransData$resYN
tempTransData$missing_pct = tempTransData$missing/tempTransData$resYN
transPercentList = c("own_pct", "borrow_pct", "lease_pct", "charter_pct", "ride_pct")
tempTransData <- recode_variables(tempTransData, c('resYN_pct', 'own_pct', 'borrow_pct', 'lease_pct',
'charter_pct', 'ride_pct', 'missing_pct'),NA,0)
for(comm in commnameList$commname)
{
transTblData <- filter (tempTransData, commname == comm) %>% ungroup() %>%
select(resName, samphh, resYN, resYN_pct, own, own_pct, borrow, borrow_pct, lease,
lease_pct, charter, charter_pct, ride, ride_pct, missing, missing_pct)
# Create formatted percentages for table.
transTblData$resYN_pct = paste(as.character(round(transTblData$resYN_pct * 100,1)), '%',sep='')
transTblData$own_pct = paste(as.character(round(transTblData$own_pct * 100,1)), '%',sep='')
transTblData$borrow_pct = paste(as.character(round(transTblData$borrow_pct * 100,1)), '%',sep='')
transTblData$lease_pct = paste(as.character(round(transTblData$lease_pct * 100,1)), '%',sep='')
transTblData$charter_pct = paste(as.character(round(transTblData$charter_pct * 100,1)), '%',sep='')
transTblData$ride_pct = paste(as.character(round(transTblData$ride_pct * 100,1)), '%',sep='')
transTblData$missing_pct = paste(as.character(round(transTblData$missing_pct * 100,1)), '%',sep='')
transTblOut <- kbl(transTblData,
caption=formatTableHeader(str_interp("Modes of transportation summary data: ${comm}, ${studyear}")),
col.names = c("Equipment",
"Sample",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage"),
align="l")%>%
kable_styling(full_width = F) %>%
add_header_above(c("  " = 2,
"Households reporting use" = 2,
"Own" = 2,
"Borrow" = 2,
"Lease  " = 2,
"Charter" = 2,
"Ride along" = 2,
"No response" = 2))
print(transTblOut)
}
# Just use a stacked plot for clarity.
tmpTransFigData <- select(tempTransData, commname, resName, all_of(transList))
# Pivot to make the methods of transportation columns into factors.
tmpPlotData <- pivot_longer(tmpTransFigData, cols=c(transList), names_to="method", values_to="number") %>% ungroup()
for(comm in commnameList$commname)
{
tmpFigData <- filter(tmpPlotData, commname == comm)  %>%
select(resName, method, number)
# Start with initial plot information.
colrs <- getColors("Spectral", 5)
#ggplot labels
plotOut <- ggplot(tmpFigData, aes(x= reorder(resName, desc(number)), y=number)) +
ggtitle(str_interp("Use of transportation to access resources, ${comm}, ${studyear}")) +
geom_col(aes(fill = method), width=0.7) +
scale_fill_manual(values = colrs)
# ggplot labels
tmpFigLabels <- group_by(tmpFigData, resName) %>%
summarize(labelValue = sum(number, na.rm=TRUE)) %>%
arrange(desc(labelValue)) %>%
ungroup ()
# Add labels, use 1% of highest harvest amount as the margin.
margin = ceiling(max(tmpFigLabels$labelValue) *.01)
for(ii in 1:nrow(tmpFigLabels))
{
tmpAmt = round(tmpFigLabels$labelValue[ii], 1)
# Default align to the RIGHT.
lrAlign = 0
# If we think that the label will spill over the edge of the plot,
#  align to the inside edge.
if(tmpAmt/max(tmpFigLabels$labelValue) > 0.75)
{
lrAlign = 1
margin = margin * -1
}
plotOut = plotOut +
annotate("text", x=ii, y=tmpAmt+margin,
label=tmpAmt, hjust=lrAlign, angle=0)
}
plotOut = plotOut +
ylab("Number of sampled households") +
xlab("Mode of transportation") +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
}
# Filter to the NPS transportation equipment questions.
motorData <- filter(NPSData, displayGroup == 6622)
motorData$resYN[motorData$resYN < 0] = NA
# Aggregate to HH level.
motorData <-group_by(motorData, projID, studyear,communty, commname, commhh, samphh, HHID, resource,
resName, comments) %>%
summarize (resYN = sum(resYN,na.rm = TRUE))
# Aggregate to community level.
motorData <-group_by(motorData, projID, studyear, communty, commname, commhh, samphh, resource,
resName) %>%
summarize(resYN = sum(resYN,na.rm = TRUE))
tmpMotorData <- motorData
# Calculate percentages and ensure NA gets turned to 0.
tmpMotorData$resYN_pct = tmpMotorData$resYN/tmpMotorData$samphh
# Create formatted percentages for table.
tmpMotorData$resYN_pct = paste(as.character(round(tmpMotorData$resYN_pct * 100,1)), '%',sep='')
for(comm in commnameList$commname)
{
motorTblData <- filter (tmpMotorData, commname == comm) %>% ungroup() %>%
select(resName, samphh, resYN, resYN_pct)
motorTblOut <- kbl(motorTblData,
caption=formatTableHeader(str_interp("Portable motorized equipment summary data: ${comm}, ${studyear}")),
col.names = c("Equipment",
"Sample",
"Number",
"Percentage"),
align="l")%>%
kable_styling(full_width = F) %>%
add_header_above(c("  " = 2,
"Households reporting use" = 2))
print(motorTblOut)
}
# Just a simple bar chart to display the motorized equipment percentages.
tmpMotorFigData <- motorData %>% ungroup ()
# Rename Other portable motors or motorized equipment to fit into figure.
tmpMotorFigData$resName[tmpMotorFigData$resource == 980600900] = "Other"
# Calculate percentages.
tmpMotorFigData$resYN_pct = tmpMotorFigData$resYN/tmpMotorData$samphh
for(comm in commnameList$commname)
{
tmpFigData <- filter(tmpMotorFigData, commname == comm)  %>%
select(resName, resYN_pct)
# Start with initial plot information.
colrs <- getColors("Spectral")
labelOrder = c("Generator", "Chainsaw", "Ice auger", "Winch", "Other")
plotOut <- ggplot(tmpFigData, aes(x=factor(resName, labelOrder), y=resYN_pct)) +
ggtitle(str_interp("Portable motorized equipment used while harvesting resources, ${comm}, ${studyear}")) +
geom_col() +
scale_fill_manual(values = colrs)
# #ggplot labels
# tmpFigLabels <- group_by(tmpFigData, resName) %>%
# summarize(labelValue = max(resYN_pct, na.rm=TRUE)) %>%
# ungroup ()
#
# # Add labels, use 1% of highest harvest amount as the margin.
# margin = ceiling(max(tmpFigLabels$labelValue) *.01)
#   for(ii in 1:nrow(tmpFigLabels))
#   {
#     tmpAmt = round(tmpFigLabels$labelValue[ii], 1)
#
# # Default align to the RIGHT.
#     lrAlign = 0
# # If we think that the label will spill over the edge of the plot,
# #  align to the inside edge.
#     if(tmpAmt/max(tmpFigLabels$labelValue) > 0.75)
#     {
#       lrAlign = 1
#       margin = margin * -1
#     }
#   plotOut = plotOut +
#         annotate("text", x=ii, y=tmpAmt+margin,
#                   label=tmpAmt, hjust=lrAlign, angle=0)
# }
plotOut = plotOut +
ylab("Percentage of sampled households") +
xlab("Equipment") +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
}
### Attempt #2
# for(comm in commnameList$commname)
# {
#   tmpFigData <- filter(tmpMotorFigData, commname == comm)  %>%
#     select(resName, resYN_pct)
#
#   plotOut <- ggplot(tmpFigData, aes(fill=resYN_pct,
#                                     x=resName,
#                                     y=resYN_pct,
#                                     label = scales::percent(resYN_pct,
#                                                             accuracy=.1))) +
#     ggtitle(str_interp("Portable motorized equipment used while harvesting resources, ${comm}, ${studyear}")) +
#     geom_bar(position = position_dodge(width = 0.5), stat="identity") +
#     scale_fill_manual(values = colrs) +
#     scale_y_continuous(labels = scales::percent, limits = c(0,1)) +
#     geom_text(position = position_dodge(width = .5),    # move to center of bars
#           vjust = -0.5,    # nudge above top of bar
#           size = 3) +
#     ylab("Percentage of sampled households") +
#     xlab("Equipment") +
#     theme(legend.position="bottom", legend.title = element_blank()) +
#     theme(text=element_text(family="serif")) +
#     theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background = element_blank(), axis.line = element_line(colour = "black"))
#
#   print(plotOut)
# }
# Filter to the NPS natural materials questions. You may need to change the subRecordCD code
# or filter by the displayGroups used in the data entry screen.
natMatData <- filter(NPSData, subRecordCD == 3)
# Need to remove one record added for salmonberries picked on NPS lands. Question was about natural materials
# gathered for handicrafts and should not include harvested subsistence resources. Additionally, record was
# added with no resource.
natMatData$resYN[is.na(natMatData$resource)] = 0
natMatData <- filter(natMatData, (!is.na(resource)))
# Remove missing; don't replace
natMatData$amt[natMatData$amt < 0 | is.na(natMatData$amt)] = 0
natMatData$resYN[natMatData$resYN < 0] = 0
# Aggregate, including amounts and units.
naturalMatData <-group_by(natMatData, projID, studyear,communty, commname, commhh, samphh,
resource, resName, units) %>%
summarize (resYN = sum(resYN,na.rm = TRUE),
amountHarv = sum(amt, na.rm=TRUE))
# Expand.
naturalMatData$resYN = naturalMatData$resYN * (naturalMatData$commhh / naturalMatData$samphh)
naturalMatData$amountHarv = naturalMatData$amountHarv * (naturalMatData$commhh / naturalMatData$samphh)
tmpNatMatData <- naturalMatData
# Calculate percentages and ensure NA gets turned to 0.
tmpNatMatData$resYN_pct = tmpNatMatData$resYN/tmpNatMatData$samphh
# Create formatted percentages for table.
tmpNatMatData$resYN_pct = paste(as.character(round(tmpNatMatData$resYN_pct * 100,1)), '%',sep='')
for(comm in commnameList$commname)
{
natMatTblData <- filter (tmpNatMatData, commname == comm) %>% ungroup() %>%
select(resName, samphh, resYN, resYN_pct,
amountHarv, units)
NatMatTblOut <- kbl(natMatTblData,
caption=formatTableHeader(str_interp("Natural materials used for making handicrafts: ${comm}, ${studyear}")),
col.names = c("Material",
"Sample",
"Number",
"Percentage",
"Amount",
"Units"),
align="l")%>%
kable_styling(full_width = F) %>%
add_header_above(c("  " = 2,
"Households reporting use" = 4))
print(NatMatTblOut)
}
#Filter to resource health question. Change the displayGroup code below to the code used in the data entry screen.
avoidResData <- filter(NPSData, subRecordCD == 0)
# Summarize to household level here in order to get one filterq response per household.
# Data entry screen was constructed with filterq at the page level.
resHealthData <-group_by(avoidResData, projID, studyear, communty, commname, commhh, samphh, HHID, filterq) %>%
summarize(projID = max(projID, na.rm = TRUE),
studyear = max(studyear, na.rm = TRUE),
communty = max(communty, na.rm = TRUE),
commname = max(commname, na.rm = TRUE),
samphh = max(samphh, na.rm = TRUE),
HHID = max(HHID, na.rm = TRUE))
# Replace NA with missing - every household should have been asked question.
resHealthData$filterq[resHealthData$filterq == -7 |
resHealthData$filterq == -6] = -9
resHealthData$filterq [is.na(resHealthData$filterq)]= -9
# Initialize variables.
resHealthData$missing [resHealthData$filterq == -9]= 1
resHealthData$unknown [resHealthData$filterq == -8]= 1
resHealthData$no [resHealthData$filterq == 0]= 1
resHealthData$yes [resHealthData$filterq == 1]= 1
#Aggregrate to HH level.
resHealthData <-group_by(resHealthData, projID, studyear,communty, commname, commhh, samphh, HHID) %>%
summarize(no = sum(no,na.rm = TRUE),
yes = sum(yes,na.rm = TRUE),
unknown = sum(unknown,na.rm = TRUE),
missing = sum(missing, na.rm = TRUE))
#Aggregate to community level.
resHealthData <-group_by(resHealthData, projID, studyear,communty, commname, commhh, samphh) %>%
summarize (no = sum(no,na.rm = TRUE),
yes = sum(yes,na.rm = TRUE),
unknown = sum(unknown,na.rm = TRUE),
missing = sum(missing, na.rm = TRUE))
# Filter to resources households avoided and reasons why.
resHealthDescData <- filter(NPSData, displayGroup == 6619)
#Aggregrate to HH level.
resHealthDescData <-group_by(resHealthDescData, projID, studyear,communty, commname, commhh, samphh, HHID,
resource, resName, resWhy) %>%
summarize (filterq = sum(filterq,na.rm = TRUE))
View(motorData)
View(naturalMatData)
View(natMatTblData)
View(natMatData)
View(firewoodUseCodesList)
View(commnameList)
View(NPSData)
View(resHealthData)
View(resHealthDescData)
View(motorData)
View(motorTblData)
View(NPSData)
filter(NPSData, displayGroup == 6622)
# Set some knit options and functions for formatting data.
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = TRUE)
knitr::opts_chunk$set(results='asis')
options(knitr.kable.NA = '')
# Clear out all existing variables & datasets.
rm(list=ls(all=TRUE))
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(adfgSubs)
# Include the project parameters file - this needs to be updated for all
#   projects.
source('../Z00_PROJECT_PARAMETERS.r')
REC66Data <- read.csv('../../CSV/01 - Database Extract/REC66_raw.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(REC66Data)
cat(formatSummaryBlock(paste("Opening file: REC66_raw.csv, ",
count,
" records loaded.", sep="")))
# ##############################################################################
# Load data from intermediate files.
# ##############################################################################
sampleData <- read.csv(str_interp('../../CSV/03 - Main/sample.csv'),
na = "",
header = TRUE,
strip.white = TRUE)
count <- nrow(sampleData)
cat(formatSummaryBlock(paste("Opening file: sample_raw.csv, ",
count,
" records loaded.", sep="")))
resNameData <- read.csv(str_interp('../../CSV/00 - Lookup Codes/fullResList_raw.csv'),
na = "",
header = TRUE,
strip.white = TRUE)
count <- nrow(resNameData)
cat(formatSummaryBlock(paste("Opening file: fullResList_raw.csv, ",
count,
" records loaded.", sep="")))
codeSetData <- read.csv(str_interp('../../CSV/00 - Lookup Codes/fullCodesetList.csv'),
na = "",
header = TRUE,
strip.white = TRUE)
count <- nrow(resNameData)
cat(formatSummaryBlock(paste("Opening file: fullCodesetList.csv, ",
count,
" records loaded.", sep="")))
resHealthData <- read_csv('../../CSV/01 - Database Extract/REC376_raw.csv')
cat(formatSummaryBlock(paste("Opening file: REC376_raw.csv, ",
nrow(resHealthData),
" records loaded.", sep="")))
# Merge assessment data with sample.
NPSData <- left_join(REC66Data, sampleData, by=c("projID", "studyear", "communty", "strata")) %>%
left_join(resNameData, by=c("resource"))
# Create community list for tables.
commnameList <- ungroup(NPSData) %>% select(commname) %>% distinct(commname)
firewoodUseCodesList <- filter(codeSetData, codeSetID == 98) %>%
select(code, codeDescription)
# Filter to the NPS transportation equipment questions.
# Change displayGroup below to the displayGroup used in the data entry screen in order to extract the portion of REC66 containing the transportation data.
transData <- filter(NPSData, displayGroup == 6620 | displayGroup == 6621)
# Set missing responses to NA in order to sum.
transData$resYN[transData$resYN < 0] = NA
transData$charter[transData$charter < 0 ] = NA
transData$lease[transData$lease < 0] = NA
transData$borrow[transData$borrow < 0] = NA
transData$own[transData$own < 0] = NA
transData$ride[transData$ride < 0] = NA
# Aggregate to HH level.Need to aggregate here in order to do logic checks - resYN and own, borrow, etc.
# are in different display groups.
transData <-group_by(transData, projID, studyear,communty, commname, commhh, samphh, HHID, resource, resName)             %>% summarize (resYN = sum(resYN,na.rm = TRUE),
own = sum(own,na.rm = TRUE),
borrow = sum(borrow,na.rm = TRUE),
lease = sum(lease, na.rm = TRUE),
charter = sum(charter,na.rm = TRUE),
ride = sum(ride,na.rm = TRUE))
#Uncomment to look for issues.
#tempTransData <- select(transData, communty, HHID, resource, resYN, own, borrow, lease, charter, ride)%>%
#                 filter(resYN == 1 & resource == 980210100)
# Create a missing category for households that used equipment but failed to provide an
# answer to the follow up question (if the equipment was owned, borrowed, etc.).
transData$missing = 0
transData$missing[transData$resYN == 1 & transData$charter==0 &transData$lease==0 & transData$borrow==0
& transData$own==0 & transData$ride==0]= 1
# Logic validation for equipment use.
transData$resYN[transData$charter == 1 | transData$lease ==1 | transData$borrow ==1 |
transData$own == 1 |transData$ride ==1]= 1
# Aggregate to community level.
transData <-group_by(transData, projID, studyear, communty, commname, commhh, samphh, resource, resName) %>%
summarize(resYN = sum(resYN,na.rm = TRUE),
own = sum(own,na.rm = TRUE),
borrow = sum(borrow,na.rm = TRUE),
lease = sum(lease, na.rm = TRUE),
charter = sum(charter,na.rm = TRUE),
ride = sum(ride,na.rm = TRUE),
missing = sum(missing, na.rm = TRUE))
tempTransData <- transData
transList = c("own", "borrow", "lease", "charter", "ride")
# Calculate percentages and ensure NA gets turned to 0.
tempTransData$resYN_pct = tempTransData$resYN/tempTransData$samphh
tempTransData$own_pct = tempTransData$own/tempTransData$resYN
tempTransData$borrow_pct = tempTransData$borrow/tempTransData$resYN
tempTransData$lease_pct = tempTransData$lease/tempTransData$resYN
tempTransData$charter_pct = tempTransData$charter/tempTransData$resYN
tempTransData$ride_pct = tempTransData$ride/tempTransData$resYN
tempTransData$missing_pct = tempTransData$missing/tempTransData$resYN
transPercentList = c("own_pct", "borrow_pct", "lease_pct", "charter_pct", "ride_pct")
tempTransData <- recode_variables(tempTransData, c('resYN_pct', 'own_pct', 'borrow_pct', 'lease_pct',
'charter_pct', 'ride_pct', 'missing_pct'),NA,0)
for(comm in commnameList$commname)
{
transTblData <- filter (tempTransData, commname == comm) %>% ungroup() %>%
select(resName, samphh, resYN, resYN_pct, own, own_pct, borrow, borrow_pct, lease,
lease_pct, charter, charter_pct, ride, ride_pct, missing, missing_pct)
# Create formatted percentages for table.
transTblData$resYN_pct = paste(as.character(round(transTblData$resYN_pct * 100,1)), '%',sep='')
transTblData$own_pct = paste(as.character(round(transTblData$own_pct * 100,1)), '%',sep='')
transTblData$borrow_pct = paste(as.character(round(transTblData$borrow_pct * 100,1)), '%',sep='')
transTblData$lease_pct = paste(as.character(round(transTblData$lease_pct * 100,1)), '%',sep='')
transTblData$charter_pct = paste(as.character(round(transTblData$charter_pct * 100,1)), '%',sep='')
transTblData$ride_pct = paste(as.character(round(transTblData$ride_pct * 100,1)), '%',sep='')
transTblData$missing_pct = paste(as.character(round(transTblData$missing_pct * 100,1)), '%',sep='')
transTblOut <- kbl(transTblData,
caption=formatTableHeader(str_interp("Modes of transportation summary data: ${comm}, ${studyear}")),
col.names = c("Equipment",
"Sample",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage",
"Number",
"Percentage"),
align="l")%>%
kable_styling(full_width = F) %>%
add_header_above(c("  " = 2,
"Households reporting use" = 2,
"Own" = 2,
"Borrow" = 2,
"Lease  " = 2,
"Charter" = 2,
"Ride along" = 2,
"No response" = 2))
print(transTblOut)
}
# Just use a stacked plot for clarity.
tmpTransFigData <- select(tempTransData, commname, resName, all_of(transList))
# Pivot to make the methods of transportation columns into factors.
tmpPlotData <- pivot_longer(tmpTransFigData, cols=c(transList), names_to="method", values_to="number") %>% ungroup()
for(comm in commnameList$commname)
{
tmpFigData <- filter(tmpPlotData, commname == comm)  %>%
select(resName, method, number)
# Start with initial plot information.
colrs <- getColors("Spectral", 5)
#ggplot labels
plotOut <- ggplot(tmpFigData, aes(x= reorder(resName, desc(number)), y=number)) +
ggtitle(str_interp("Use of transportation to access resources, ${comm}, ${studyear}")) +
geom_col(aes(fill = method), width=0.7) +
scale_fill_manual(values = colrs)
# ggplot labels
tmpFigLabels <- group_by(tmpFigData, resName) %>%
summarize(labelValue = sum(number, na.rm=TRUE)) %>%
arrange(desc(labelValue)) %>%
ungroup ()
# Add labels, use 1% of highest harvest amount as the margin.
margin = ceiling(max(tmpFigLabels$labelValue) *.01)
for(ii in 1:nrow(tmpFigLabels))
{
tmpAmt = round(tmpFigLabels$labelValue[ii], 1)
# Default align to the RIGHT.
lrAlign = 0
# If we think that the label will spill over the edge of the plot,
#  align to the inside edge.
if(tmpAmt/max(tmpFigLabels$labelValue) > 0.75)
{
lrAlign = 1
margin = margin * -1
}
plotOut = plotOut +
annotate("text", x=ii, y=tmpAmt+margin,
label=tmpAmt, hjust=lrAlign, angle=0)
}
plotOut = plotOut +
ylab("Number of sampled households") +
xlab("Mode of transportation") +
theme(legend.position="bottom") +
theme(text=element_text(family="serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
}
filter(NPSData, displayGroup == 6622)
