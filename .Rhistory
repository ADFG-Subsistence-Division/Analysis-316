mutate(gearType = str_replace(gearType, 'elbs_', '')) %>%
left_join(gearLabelData, by = "gearType")
# Make nonsalmon plots
pmap(
combinations,
function(studyear, commname) horizBarPlot(plotNonSalmonData, studyear, commname)
)
View(finalHarvByGearData)
allSubsGearList
subsGearList
# Set some knit options and functions for formatting data.
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = TRUE)
knitr::opts_chunk$set(results='asis')
options(knitr.kable.NA = '')
# Clear out all existing variables & datasets.
rm(list=ls(all=TRUE))
# Additional libraries
library(knitr)
library(kableExtra)
library(adfgSubs)
# Include the project parameters file - this needs to be updated for all
#   projects.
source('../Z00_PROJECT_PARAMETERS.r')
# Note project information
cat(str_interp('<p class="rbn">Working on project ${projID} ${projectName} - ${studyear}</p>'))
# ##############################################################################
# Load data from intermediate files.
# ##############################################################################
harvData <- read.csv('../../CSV/03 - Main/harvData_HH_finalPrepped.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(harvData)
cat(formatSummaryBlock(paste("Opening file: harvData_HH_finalPrepped.csv, ",
count,
" records loaded.", sep="")))
salmonGearData <- read.csv('../../CSV/00 - Lookup Codes/salmonGear.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(salmonGearData)
cat(formatSummaryBlock(paste("Opening file: salmonGear.csv, ",
count,
" records loaded.", sep="")))
nonSalmonGearData <- read.csv('../../CSV/00 - Lookup Codes/nonSalmonGear.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(nonSalmonGearData)
cat(formatSummaryBlock(paste("Opening file: nonSalmonGear.csv, ",
count,
" records loaded.", sep="")))
projectGear <- dplyr::bind_rows(salmonGearData, nonSalmonGearData) %>%
distinct()
projectGear <- projectGear$harvAmtList
# Full standard list of names; sub-set as needed.
allSubsGearList = c("amtDriftGillNet", "amtSetGillNet", "amtUnspecifiedGillNet", "amtSeine",
"amtUnspecifiedSubsistenceNet", "amtFishTrap", "amtFishWheel",
"amtJigHandLine", "amtHookUnderIce", "amtTrotLine", "amtFishTrapUnderIce", "amtNetUnderIce",
"amtUnspecifiedIceFishing", "amtLongLineSkate", "amtSpearGaff",
"amtCastNet", "amtOtherGear")
#Subset subsistence
subsGearList = intersect(projectGear, allSubsGearList)
cat("<h4>Subsistence gear types found:</h4>")
cat(formatValueList(subsGearList))
# List of commercial fishing columns (Always include all, even if 0)
cfHarvList = c("amtGavetoCrew", "amtGaveOthers", "removeOwnUse")
# List of sport / non-subsistence gear (check local regs on dipnet)
allOtherGearList = c("amtDipNet", "amtTrolling", "amtRodReel")
# Example subset
otherGearList = intersect(projectGear, allOtherGearList)
cat("<h4>Other gear types found:</h4>")
cat(formatValueList(otherGearList))
commnameList <- select(harvData, commname) %>% distinct(commname)
# Make the full starting list of gear type names.
fullGearList = c(cfHarvList, subsGearList, otherGearList)
fullGearData <- syms(fullGearList)
#Cross reference for gear-column name to label
gearLabelData <- data.frame(gearType = c("amtGavetoCrew",
"amtGaveOthers",
"removeOwnUse",
"amtCFHarv",
"amtSubsHarv",
"amtDriftGillNet",
"amtSetGillNet",
"amtUnspecifiedGillNet",
"amtSeine",
"amtUnspecifiedSubsistenceNet",
"amtFishTrap",
"amtFishWheel",
"amtJigHandLine",
"amtHookUnderIce",
"amtTrotLine",
"amtFishTrapUnderIce",
"amtNetUnderIce",
"amtUnspecifiedIceFishing",
"amtLongLineSkate",
"amtSpearGaff",
"amtCastNet",
"amtOtherGear",
"amtDipNet",
"amtTrolling",
"amtRodReel"),
gearName = c("Commercial-Gave to crew",
"Commercial-Gave to others",
"Commercial-Remove own use",
"Commercial retention",
"Subsistence gear subtotal",
"Drift net",
"Set net",
"Gill net",
"Seine",
"Unspecified subs. net",
"Fish trap",
"Fish wheel",
"Jig/Hand-line",
"Hook Under Ice",
"Trot line",
"Fish trap under ice",
"Net under ice",
"Ice fishing",
"Long line/skate",
"Spear/gaff",
"Cast net",
"Other Gear",
"Dip net",
"Trolling",
"Rod & reel"))
# Initalize the final output list.
finalGearCols = c()
# Commercial fishing gear will be the first detail gear to use.
for(gear in cfHarvList)
{
finalGearCols = c(finalGearCols,
gear,
paste("lbs_", gear, sep=""))
}
# Add totals columns for CF into the final output columns
finalGearCols = c(finalGearCols, "amtCFHarv", "lbs_amtCFHarv")
# Subsistence gear.
for(gear in subsGearList)
{
finalGearCols = c(finalGearCols,
gear,
paste("lbs_", gear, sep=""))
}
# Totals for subsistence gear.
finalGearCols = c(finalGearCols, "amtSubsHarv", "lbs_amtSubsHarv")
# Other gear.
for(gear in otherGearList)
{
finalGearCols = c(finalGearCols,
gear,
paste("lbs_", gear, sep=""))
}
# Finalize the 'final' output columns; broken by gear type and
#       'key' information. Note that we are only including
#        estimated data for clarity.
finalGearCols <- paste("e", finalGearCols, sep="")
keyOutputCols <- c("projID", "studyear", "communty", "commname",
"NHouseholds", "NPopulation", "resource", "resName",
"units", "convFact")
totalAmtCols <- c("estHarvestAmt", "estHarvestLbs")
finalOutputCols <- c(keyOutputCols, finalGearCols, totalAmtCols)
# Trim extra spaces from resource names; add indentation for species names.
harvData <- harvData %>%
mutate(resName = trimws(resName),
case_when(specList == 1 ~ paste('     ', resName, sep=''),
TRUE ~ resName))
# Just individual species for salmon and other fish.
amtByGearData <- harvData %>%
filter(specList == 1 & resource < 200000000) %>%
#  Only columns necessary for analysis.
select(projID, studyear, communty, commname, strata, strataWt, NHouseholds,
NPopulation, resource, resName, units, convFact,
harvestAmt_MR, harvestLbs_MR, estHarvestAmt, estHarvestLbs,
!!!fullGearData, amtDogFood)
# Set aside for comparisons
totalRowsData <- harvData %>%
filter(resource %in% c(110000000, 120000000))
# Set up gear lists
# Add commercial and subsistence harvest columns to the full gear type list
fullGearList2 <- c("amtCFHarv", "amtSubsHarv", fullGearList)
# Expand the fullGearList to include pounds
fullGearList3 <- c(fullGearList2, paste("lbs_", fullGearList2, sep=""))
# Expand the fullGearList to include estimated values
fullGearList4 <- c(fullGearList3, paste("e", fullGearList3, sep=""))
finalHarvByGearData <- amtByGearData %>%
# Calculate total amounts for commercial and subsistence harvests
rowwise() %>%
mutate(amtCFHarv = sum(across(all_of(cfHarvList)), na.rm=TRUE),
# In the Kotzebue district, rod and reel is only legal gear for salmon in marine waters; assuming that salmon taken with rod and reel are being harvested near the community of Ambler (upriver from Kotzebue Sound by many, many miles). Rod and reel is legal gear for nonsalmon fish though.
amtSubsHarv = if (resource < 12000000) {
sum(c_across(all_of(subsGearList)), na.rm = TRUE)
} else if (resource >= 12000000) {
sum(c_across(c("amtSeine",
"amtOtherGear",
"amtUnspecifiedGillNet",
"amtUnspecifiedSubsistenceNet",
"amtHookUnderIce",
"amtNetUnderIce",
"amtLongLineSkate",
"amtRodReel")), na.rm = TRUE)
} else {
NA
}
)%>%
ungroup() %>%
# Calculate pounds; new columns will simply be given 'lbs_' to distinguish
mutate(across(all_of(c(fullGearList2, 'amtDogFood')),
~ . * convFact,
.names='lbs_{.col}')) %>%
# Make estimates by applying stratified weights
mutate(across(all_of(c(fullGearList3, 'amtDogFood', 'lbs_amtDogFood')),
~ . * strataWt,
.names="e{.col}")) %>%
# Summarize to community/species level; include the estimated amount
# and pounds previously calculated
group_by(projID, studyear, communty, commname,
NHouseholds, NPopulation, resource, resName, units, convFact) %>%
summarize(across(all_of(c(fullGearList4, totalAmtCols,
'amtDogFood', 'lbs_amtDogFood',
'eamtDogFood', 'elbs_amtDogFood')), sum),
.groups = "drop") %>%
# Create the sub-totals for salmon and non-salmon species
{ subTotData <<- .; subTotData } %>%
mutate(resource = trunc(resource / 10000000) * 10000000,
resName = case_when(
resource == 110000000 ~ "Salmon",
resource == 120000000 ~ "Nonsalmon fish",
TRUE ~ resName
),
# Units for nonsalmon fish are always 'lb'
units = if_else(resource == 120000000, 2, units)
) %>%
# Sub-totals for salmon and nonsalmon species
group_by(projID, studyear, communty, commname,
NHouseholds, NPopulation, resource, resName, units) %>%
summarize(across(all_of(c(fullGearList4, totalAmtCols,
'amtDogFood', 'lbs_amtDogFood',
'eamtDogFood', 'elbs_amtDogFood')), sum),
.groups = "drop") %>%
# Combine sub-totals with the original data and sort the results
bind_rows(subTotData) %>%
arrange(projID, studyear, communty, resource) %>%
# Select the final output columns and include additional calculated columns
select(
!!!syms(finalOutputCols),
eamtDogFood, elbs_amtDogFood
)
tmpData <- ungroup(finalHarvByGearData) %>%
filter(resource < 120000000)
# Round the columns for display.
tmpData <- mutate(tmpData, across(all_of(c(finalGearCols, totalAmtCols)), ~ round(., 1)))
for(comm in commnameList$commname)
{
tblTmpData <- filter(tmpData, commname == comm) %>%
select(resName, !!!syms(c(finalGearCols, totalAmtCols)))
tblOut <- kbl(tblTmpData,
caption=formatTableHeader(str_interp("Harvests of salmon by gear type: ${comm}, ${studyear}"))) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "400px")
print(tblOut)
# Check to see if the sum-totals match from earlier processing steps. If not, throw an error message.
thisEstAmt = tmpData$estHarvestAmt[tmpData$resource == 110000000 & comm==tmpData$commname]
prevEstAmt = round(sum(totalRowsData$estHarvestAmt[totalRowsData$resource == 110000000 & comm==totalRowsData$commname]),1)
if(thisEstAmt != prevEstAmt)
{
cat(errorMessage(str_interp("ERROR! - total amounts from harvest by gear for salmon do not match those calculated for the CSIS/Harvest and Use table for ${comm}, ${studyear}")))
} else {
cat(greenMessage(str_interp("${comm} harvest by gear total amount for salmon match those calculated for CSIS/Harvest and Use tables.")))
}
}
tmpData <- finalHarvByGearData %>%
ungroup() %>%
filter(resource >= 120000000) %>%
# Round the columns for display.
mutate(across(all_of(c(finalGearCols, totalAmtCols)), ~ round(., 1)))
for(comm in commnameList$commname)
{
tblTmpData <- filter(tmpData, commname == comm) %>%
select(resName, !!!syms(c(finalGearCols, totalAmtCols)))
tblOut <- kbl(tblTmpData,
caption=formatTableHeader(str_interp("Harvests of non salmon fish by gear type: ${comm}, ${studyear}"))) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "400px")
print(tblOut)
# Check to see if the sum-totals match from earlier processing steps. If not, throw an error message.
thisEstLbs = tmpData$estHarvestLbs[tmpData$resource == 120000000 & comm==tmpData$commname]
prevEstLbs = round(sum(totalRowsData$estHarvestLbs[totalRowsData$resource == 120000000 & comm==totalRowsData$commname]),1)
if(thisEstLbs != prevEstLbs)
{
cat(errorMessage(str_interp("ERROR! - total pounds from harvest by gear for non salmon do not match those calculated for the CSIS/Harvest and Use table for ${comm}, ${studyear}")))
} else {
cat(greenMessage(str_interp("${comm} harvest by gear total pounds for non salmon match those calculated for CSIS/Harvest and Use tables.")))
}
}
figData <- finalHarvByGearData %>%
# Set default category info
mutate(
fishCategory = case_when(
resource < 120000000 ~ "Salmon",
resource >= 120000000 & resource < 124500000 ~ "Marine fish",
(resource >= 125600000 & resource <= 125600003) |
(resource >= 126400000 & resource < 126500000) ~ "Whitefishes",
TRUE ~ "Other fish"
),
sOrder = case_when(
resource < 120000000 ~ 1,
resource >= 120000000 & resource < 124500000 ~ 2,
(resource >= 125600000 & resource <= 125600003) |
(resource >= 126400000 & resource < 126500000) ~ 3,
TRUE ~ 4
)
) %>%
# Remove species that weren't harvested
filter(estHarvestLbs > 0) %>%
# Remove summary rows
filter(resource != 120000000 & resource != 110000000) %>%
# Rank species within each group
group_by(projID, studyear, communty, sOrder) %>%
mutate(
harvRank = order(order(desc(estHarvestLbs))),
nCases = n()
) %>%
ungroup() %>%
# Split into top 9 species and others
mutate(
resource = if_else(harvRank >= 10, 999999999, resource),
harvRank = if_else(harvRank >= 10, 10, harvRank),
resName = case_when(
sOrder == 1 & harvRank == 10 ~ "Other salmon",
sOrder == 2 & harvRank == 10 ~ "Other marine fishes",
sOrder == 3 & harvRank == 10 ~ "Other whitefishes",
sOrder == 4 & harvRank == 10 ~ "Other non salmon fishes",
TRUE ~ resName
)
) %>%
# Aggregate the bottom ranks
group_by(projID, studyear, communty, commname, fishCategory, resource, resName, sOrder,
NHouseholds, NPopulation, harvRank) %>%
summarize(
estHarvestLbs = sum(estHarvestLbs, na.rm = TRUE),
across(starts_with("elbs_"), \(xx) sum(xx, na.rm = TRUE)),
.groups = "drop"
) %>%
# Combine top 9 species with aggregated bottom ranks
arrange(projID, studyear, communty, sOrder, harvRank) %>%
# Select final columns
select(
projID, studyear, communty, commname, fishCategory, resource, resName, sOrder,
NHouseholds, NPopulation, estHarvestLbs, harvRank, starts_with("elbs_")
) %>%
mutate(resName = trimws(resName))
horizBarPlot <- function(df, year, comm) {
# Filter for study year and community
df_filt <- df %>%
filter(studyear == year, commname == comm)
# Calculate sum(harvestLbs) by resource
resource_totals <- df_filt %>%
group_by(resource, resName) %>%
summarize(total_harvest = sum(harvestLbs, na.rm = TRUE), .groups = "drop") %>%
arrange(desc(total_harvest))
# Order resources by total harvest
df_filt <- df_filt %>%
mutate(
resource = factor(resource, levels = resource_totals$resource),
resName = factor(resName, levels = resource_totals$resName)
)
# For label positions: get total per resource
label_df <- resource_totals %>%
mutate(
resName = factor(resName, levels = resource_totals$resName)
)
ggplot(df_filt, aes(x = harvestLbs, y = resName, fill = gearName)) +
geom_col(position = "stack") +
geom_text(
data = label_df,
aes(
x = total_harvest + max(resource_totals$total_harvest) * 0.02, # a little to the right
y = resName,
label = round(total_harvest, 1)
),
inherit.aes = FALSE,
hjust = 0,
size = 4,
family = "serif"
) +
scale_x_continuous(expand = expansion(mult = c(0, .15))) +
labs(
title = str_glue("Harvest by Resource and Gear ({comm}, {year})"),
x = "Harvest (Pounds)",
y = "Resource",
fill = "Gear Type"
) +
scale_fill_manual(values = getColors(nColors = nrow(distinct(df_filt, gearName)))) +
theme_minimal() +
theme(
axis.text.y = element_text(face = "bold"),
text=element_text(family="serif"),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position="bottom")
}
# Get all combinations
combinations <- figData %>% distinct(studyear, commname)
# Remove all gear types without harvest quantities for clarity (by category).
plotSalmonData <- figData %>%
select(-elbs_amtDogFood) %>%
pivot_longer(cols = starts_with("elbs_"),
names_to = "gearType",
values_to = "harvestLbs") %>%
filter(resource < 120000000 &
!(gearType %in% paste('elbs_', cfHarvList, sep="")) &
gearType != 'elbs_amtSubsHarv') %>%
# Find the 'max' harvest for each specified gear type as a mutate. Filter on this so that gear types
#   without harvests don't appear (this is done to provide a mechanism for analysts
#   to simply RUN the R-Markdown without first correctly identifying gear type).
group_by(projID, studyear, communty, gearType) %>%
mutate(maxGearLbs = max(harvestLbs, na.rm=TRUE)) %>%
filter(harvestLbs > 0) %>%
ungroup() %>%
mutate(gearType =str_replace(gearType, 'elbs_', '')) %>%
left_join(gearLabelData, by = "gearType")
# Make salmon plots
pmap(
combinations,
function(studyear, commname) horizBarPlot(plotSalmonData, studyear, commname)
)
plotNonSalmonData <- figData %>%
select(-elbs_amtDogFood) %>%
pivot_longer(cols = starts_with("elbs_"),
names_to = "gearType",
values_to = "harvestLbs") %>%
filter(resource > 120000000 &
!(gearType %in% paste('elbs_', cfHarvList, sep="")) &
gearType != 'elbs_amtSubsHarv') %>%
# Find the 'max' harvest for each specified gear type as a mutate. Filter on this so that gear types
#   without harvests don't appear (this is done to provide a mechanism for analysts
#   to simply RUN the R-Markdown without first correctly identifying gear type).
group_by(projID, studyear, communty, gearType) %>%
mutate(maxGearLbs = max(harvestLbs, na.rm=TRUE)) %>%
filter(harvestLbs > 0) %>%
group_by(projID, studyear, communty) %>%
ungroup() %>%
mutate(gearType = str_replace(gearType, 'elbs_', '')) %>%
left_join(gearLabelData, by = "gearType")
# Make nonsalmon plots
pmap(
combinations,
function(studyear, commname) horizBarPlot(plotNonSalmonData, studyear, commname)
)
# Prep a temporary dataset for use in calculating each of the 3 bases.
gearPctPrepData <- finalHarvByGearData %>%
mutate(category = if_else(resource < 120000000, 1, 2))
# Get the denominator (percent base) for the percentage calculation, and only
#   keep the gear columns.
denomByGearData1 <- group_by(gearPctPrepData, projID, studyear, communty, category) %>%
summarize(across(all_of(c("estHarvestAmt", "estHarvestLbs", finalGearCols)), max))
denomByGearData2 <- select(gearPctPrepData, projID, studyear, communty, resource, category) %>%
group_by(projID, studyear, communty, resource, category) %>%
right_join(denomByGearData1, by=c("projID", "studyear", "communty", "category"))
denomByGearData3 <- ungroup(denomByGearData2) %>%
select(!!!syms(c("estHarvestAmt", "estHarvestLbs", finalGearCols)))
# Get the key identifying information (ki) for this dataset. Ungroup to prevent
#   columns from unexpected and unwanted columns being re-added.
kiData <- gearPctPrepData %>%
ungroup() %>%
select(projID, studyear, communty, commname, resource, resName, units)
# Get the numerators for the operation into a single data frame
numByGearData <- ungroup(gearPctPrepData) %>%
select(!!!syms(c("estHarvestAmt", "estHarvestLbs", finalGearCols)))
# Calculate percentages using base of 'all resources for category'
pctByGearData <- mutate(numByGearData, across(all_of(c("estHarvestAmt", "estHarvestLbs", finalGearCols)), ~ . / denomByGearData3[[cur_column()]]))
# Put key (ki) data back together with the percent by gear data.
pctByGearData <- dplyr::bind_cols(kiData, pctByGearData)
# Give 'base' a value for the output table and a number for sorting.
pctByGearData$base = 1
pctByGearData$baseDesc = "Gear type"
for(comm in commnameList$commname)
{
# Do salmon and non salmon separately
tblTmpData <- filter(pctByGearData,
commname == comm & resource < 120000000) %>%
mutate(across(seq(8, ncol(.) - 2), ~ scales::percent(., accuracy = 0.1))) %>%
select(resName, units, !!!syms(c("estHarvestAmt", "estHarvestLbs", finalGearCols))) %>%
select(where(~ all(!is.na(.))))
tblOut <- kbl(tblTmpData,
caption=formatTableHeader(str_interp("Percent of salmon harvested by gear type: ${comm}, ${studyear}"))) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "400px")
print(tblOut)
# Do salmon and non salmon separately
tblTmpData = filter(pctByGearData,
commname == comm & resource >= 120000000) %>%
# Reformat all gear amount/pounds columns as percentages
mutate(across(seq(8, ncol(.) - 2), ~ scales::percent(., accuracy = 0.1))) %>%
select(resName, units, !!!syms(c("estHarvestAmt", "estHarvestLbs", finalGearCols))) %>%
# Don't show the columns were there are no data/only zeros.
select(where(~ all(!is.na(.))))
tblOut <- kbl(tblTmpData,
caption=formatTableHeader(str_interp("Percent of non salmon harvested by gear type: ${comm}, ${studyear}"))) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "400px")
print(tblOut)
}
View(gearPctPrepData)
finalGearCols
