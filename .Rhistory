geom_bar(position = position_dodge(width = 0.5), stat = "identity") +
geom_text(position = position_dodge(width = 0.5), vjust = -0.5, size = 3) +
scale_x_discrete(limits = catOrder) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = colrs) +
labs(fill = '') +
ylab("Percentage") + xlab("Resource category") +
theme(legend.position = "bottom", legend.title = element_blank()) +
theme(text = element_text(family = "serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
})
# Group by category and calculate max harvests for use in percent calculations
harvUseFigData <- commHarvData %>%
group_by(projID, studyear, communty, catCode) %>%
mutate(
catHarvLbs = max(estHarvestLbs_sum, na.rm = TRUE),
catHarvAmt = max(estHarvestAmt_sum, na.rm = TRUE)
) %>%
ungroup() %>%
mutate(
pctCatByLbs = estHarvestLbs_sum / catHarvLbs,
pctCatByAmt = estHarvestAmt_sum / catHarvAmt,
# Furbearers will always be compared by individual harvests, because many are not eaten.
pctByCat = if_else(catCode == 22, pctCatByAmt, pctCatByLbs),
# Set a flag if the total contribution is between 0 and 1.5%, these
#   will be lumped into an 'other' category. This flag will help us
#   determine the number of these lumped species. If there is only 1 - no point
#   in aggregating as 'other'.
othIdx = if_else(pctByCat < 0.015 & pctByCat > 0, 1L, 0L)
) %>%
# Get a count of resources by category
group_by(projID, studyear, communty, catCode) %>%
mutate(othCount = sum(othIdx, na.rm = TRUE)) %>%
ungroup() %>%
# Drop the 0 harvests of individual species, they just muck-up the figure
#   - Leave in overall categories though, just for accounting purposes.
filter(pctByCat > 0 | specList != 1,
# Remove wood.
resource != 604000000)
# Helper function for vegetation lumping
veg_lump <- function(data, resource_range, name, code = NULL) {
data %>%
filter(resource %in% resource_range) %>%
mutate(
resource = min(resource_range),
resName = name,
specList = 1
)
}
# Special handling for vegetation, we'll lump into sub-categories to start:
#  Mushrooms, Berries, Other vegetation, seaweed, all other processing will work fine as below (I think).
# Seaweed into its own data frame for a minute
seaweedData <- veg_lump(harvUseFigData, resource_range = 603000000:(604000000 - 1), name = "Seaweed")
# Mushrooms into their own data frame.
mushroomData <- veg_lump(harvUseFigData, resource_range = c(602040000, 602046000, 602046010, 602046020, 602046030, 602046040), name = "Mushrooms")
# Berries into their own data frame.
berryData <- veg_lump(harvUseFigData, resource_range = 601000000:(602000000 - 1), name = "Berries")
# Other vegetation
otherPlantsData <- harvUseFigData %>%
filter(resource >= 602000000, resource < 603000000, !resource %in% c(602040000, 602046000, 602046010, 602046020, 602046030, 602046040)) %>%
mutate(
resource = 602000000,
resName = "Other plants and greens",
specList = 1
)
# Remove vegetation from the main dataset.
harvUseFigData_main <- harvUseFigData %>%
filter(resource < 600000000)
# break-out lumped species from those we want to split out.
lumpedSpecies1Data <- harvUseFigData_main %>%
filter(
pctByCat < 0.015,
(catCode < 30 | catCode == 43),
othCount > 1
) %>%
mutate(
resName = case_when(
catCode == 11 ~ "All other salmon",
catCode == 12 ~ "All other nonsalmon fishes",
catCode == 21 ~ "All other large land mammals",
catCode == 22 ~ "All other small land mammals",
catCode == 23 ~ "All other feral animals",
catCode %in% c(41, 42, 43) ~ "All other birds and eggs",
TRUE ~ "All other"
),
resource = (catCode * 10000000) + 9999999
)
lumpedSpecies2Data <- harvUseFigData_main %>%
filter(
pctByCat < 0.015,
(catCode >= 30 & catCode < 60 & catCode != 43),
othCount > 1
) %>%
mutate(
resName = case_when(
catCode == 30 ~ "All other marine mammals",
catCode == 50 ~ "All other marine invertebrates",
# catCode %in% c(41, 42, 43) ~ "All other birds and eggs",
catCode == 40 ~ "All other birds and eggs",
TRUE ~ "All other"
),
resource = (catCode * 10000000) + 99999999
)
splitSpeciesData <- harvUseFigData_main %>%
filter(pctByCat > 0.015 | othCount <= 1)
# Bring all of the data back together now.
harvUseFigData <- bind_rows(
seaweedData,
mushroomData,
berryData,
otherPlantsData,
lumpedSpecies1Data,
lumpedSpecies2Data,
splitSpeciesData
) %>%
group_by(projID, studyear, communty, commname, catCode, resource, resName) %>%
summarize(
estHarvestAmt_sum = sum(estHarvestAmt_sum, na.rm = TRUE),
estHarvestLbs_sum = sum(estHarvestLbs_sum, na.rm = TRUE),
percap = sum(percap, na.rm = TRUE),
.groups = "drop"
)
# Clean up species/resource names
harvUseFigData$resName <- str_trim(harvUseFigData$resName, side = "both")
View(harvUseFigData)
# Set some knit options and functions for formatting data.
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = TRUE)
knitr::opts_chunk$set(results='asis')
options(knitr.kable.NA = '')
# Clear out all existing variables & datasets.
rm(list=ls(all=TRUE))
# Additional libraries
library(knitr)
library(kableExtra)
library(adfgSubs)
library(glue)
# Include the project parameters file - this needs to be updated for all
#   projects.
source('../Z00_PROJECT_PARAMETERS.r')
# Note project information
cat(str_interp('<p class="rbn">Working on project ${projID} ${projectName} - ${studyear}</p>'))
# Load data
# This for each file opened.
commHarvData <- read.csv('../../CSV/03 - main/full_community_harvest_raw.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(commHarvData)
cat(formatSummaryBlock(paste("Opening file: full_community_harvest_raw.csv, ",
count,
" records loaded.", sep="")))
# Open and report on the full resource list, remove specList, we've already
#   resolved that in the commHarvData file.
resCodeData <- read.csv('../../CSV/00 - Lookup Codes/fullResList_raw.csv',
na = '',
header = TRUE,
strip.white = TRUE) %>%
select(-specList)
count <- nrow(resCodeData)
cat(formatSummaryBlock(paste("Opening file: fullResList_raw.csv, ",
count,
" records loaded.", sep="")))
# Refactor resource code logic. Fish and land mammals have top-level categories
#   specified by the 2nd digit code. All other resources have a single standard
#   top level reporting category with the second digit.
resCodeData <- resCodeData %>%
mutate(
catCode = case_when(
resource < 300000000 ~ trunc(resource / 1e7),
TRUE                 ~ trunc(resource / 1e8) * 10
)
)
# Flag detail rows and filter
commHarvData <- commHarvData %>%
mutate(detailRow = as.integer((rescode - trunc(rescode / 10) * 10) > 0)) %>%
filter(detailRow == 0) %>%
# Remove summary rows except top-level categories (including feral)
filter(
specList == 1 |
(specList != 1 &
rescode %in% c(
0, 110000000, 120000000, 210000000, 220000000, 230000000,
300000000, 400000000, 500000000, 600000000
))
) %>%
# Rename columns to standards
rename(
communty = commcode,
studyear = year,
projID = projID,
resource = rescode,
used_pct = used,
attempt_pct = trying,
harvestq_pct = hrvsting,
received_pct = receving,
giveaway_pct = giving,
estHarvestLbs_sum = xtotlbs,
harvestLbs_mean = avglbhrv,
estHarvestAmt_sum = xtotnum,
reptHarvestAmt = numharv,
reptHarvestLbs = totlbhrv,
CIP_Lbs = pm95pct
) %>%
# Merge in resource code names
left_join(resCodeData, by = c("resource")) %>%
# Trim and indent species names
mutate(
resName = str_trim(resName, side = "both"),
resName = if_else(specList == 1, paste0("     ", resName), resName),
harvestAmt_mean = estHarvestAmt_sum / NHouseholds
)
# Organize columns and sort
harvRawData <- commHarvData %>%
select(
projID, studyear, communty, commname, resource, resName, used_pct, attempt_pct,
harvestq_pct, received_pct, giveaway_pct, estHarvestLbs_sum, harvestLbs_mean,
percap, estHarvestAmt_sum, units, harvestAmt_mean, CIP_Lbs, CIP_Amt, specList,
convFact, reptHarvestAmt, reptHarvestLbs, NHouseholds, NPopulation, specList
) %>%
arrange(projID, studyear, communty, resource)
# Format output: scale percentages to 0-100
harvOutputData <- harvRawData %>%
mutate(across(
c(used_pct, attempt_pct, harvestq_pct, received_pct, giveaway_pct, CIP_Lbs, CIP_Amt),
~ .x * 100
))
count <- nrow(harvRawData)
cCount <- length(harvRawData)
cat(formatSummaryBlock(str_interp("Data prepped for output file: harvest_use_raw.csv, there are ${count} rows and ${cCount} columns.")))
commnameList <- harvRawData %>% select(commname) %>% distinct()
walk(commnameList, function(comm) {
tempData <- harvRawData %>%
filter(commname == comm) %>%
select(resName, used_pct, attempt_pct, harvestq_pct, received_pct,
giveaway_pct, estHarvestLbs_sum, harvestLbs_mean, percap,
estHarvestAmt_sum, units, harvestAmt_mean, CIP_Lbs, CIP_Amt, specList) %>%
mutate(
CIP = if_else(units == "lb", CIP_Lbs, CIP_Amt),
used_pct = round(used_pct * 100, 1),
attempt_pct = round(attempt_pct * 100, 1),
harvestq_pct = round(harvestq_pct * 100, 1),
received_pct = round(received_pct * 100, 1),
giveaway_pct = round(giveaway_pct * 100, 1),
estHarvestLbs_sum = round(estHarvestLbs_sum, 1),
harvestLbs_mean = round(harvestLbs_mean, 1),
percap = round(percap, 1),
estHarvestAmt_sum = round(estHarvestAmt_sum, 1),
harvestAmt_mean = round(harvestAmt_mean, 1),
CIP = round(CIP * 100, 1)
) %>%
select(-CIP_Lbs, -CIP_Amt)
indentList <- which(tempData$specList == 1)
boldList <- which(tempData$specList == 2)
tempData <- select(tempData, -specList)
studyear <- unique(harvRawData$studyear[harvRawData$commname == comm])
tblOut <- kbl(
tempData,
caption = formatTableHeader(str_interp("Harvest and use table for: ${comm}, ${studyear}")),
col.names = c(
"Resource", "Use %", "Attempt %", "Harvest %", "Receive %", "Gave %",
"Total", "Mean per household", "Per capita", "Total", "Unit",
"Mean per household", "CI 95% +-"
)
) %>%
kable_styling(full_width = FALSE) %>%
add_indent(indentList) %>%
row_spec(boldList, bold = TRUE, hline_after = FALSE) %>%
add_header_above(c(
"  " = 1, "Percentage of households" = 5, "Harvest weight (lbs)" = 3,
"Harvest amount" = 3, "  " = 1
))
print(tblOut)
})
harvUseCatData <- harvRawData %>%
filter(specList == 2) %>%
select(projID, studyear, communty, commname, resource, resName,
used_pct, attempt_pct, harvestq_pct, estHarvestAmt_sum, estHarvestLbs_sum, percap)
walk(commnameList, function(comm) {
# Table 1: Harvest by category
tempData <- harvUseCatData %>%
filter(commname == comm) %>%
arrange(resource) %>%
select(resName, estHarvestLbs_sum, percap) %>%
mutate(
estHarvestLbs_sum = round(estHarvestLbs_sum, 1),
percap = round(percap, 1)
)
tblOut <- kbl(
tempData,
caption = formatTableHeader(str_interp("Harvest by category for ${comm}, ${unique(harvUseCatData$studyear[harvUseCatData$commname == comm])}")),
col.names = c("Resource", "Total", "Per capita")
) %>%
kable_styling(full_width = FALSE) %>%
add_header_above(c("  " = 1, "Harvest in pounds usable weight" = 2))
print(tblOut)
pieData <- tempData %>%
filter(resName != 'All resources', percap > 0) %>%
arrange(percap) %>%
mutate(resName = factor(resName, levels = rev(unique(resName))))
# Get colors (use your existing function or any palette)
colrs <- getColors(nColors = nrow(pieData))
# Create labels: "Resource; XX%"
labels <- paste0(pieData$resName, "; ", round(pieData$percap / sum(pieData$percap) * 100), "%")
# Draw the pie chart using base R
catPlot <- pie(
pieData$percap,
labels = labels,
col = colrs,
main = str_interp("Harvest by category for ${comm}, ${unique(harvUseCatData$studyear[harvUseCatData$commname == comm])}"),
font.main = 1,
family = "serif",
cex = 0.8
)
catPlot
# Bar plot: Use, attempt, and harvest by resource category
tempCatData <- harvUseCatData %>%
filter(commname == comm, resource != 0) %>%
arrange(resource) %>%
select(resName, used_pct, attempt_pct, harvestq_pct)
count <- nrow(tempCatData)
plotData <- tibble(
category = rep(tempCatData$resName, 3),
label = rep(c("using", "attempting", "harvesting"), each = count),
useVar = c(tempCatData$used_pct, tempCatData$attempt_pct, tempCatData$harvestq_pct)
) %>%
mutate(
category = str_wrap(category, width = 10)
)
labelOrder <- c("using", "attempting", "harvesting")
catOrder <- plotData %>% distinct(category) %>% pull(category)
colrs <- getColors(nColors = 3)
plotOut <- ggplot(plotData, aes(
fill = factor(label, labelOrder),
y = useVar,
x = category,
label = scales::percent(useVar)
)) +
ggtitle(str_interp("Use, attempt, and harvest by resource category, ${comm}, ${unique(harvUseCatData$studyear[harvUseCatData$commname == comm])}")) +
geom_bar(position = position_dodge(width = 0.5), stat = "identity") +
geom_text(position = position_dodge(width = 0.5), vjust = -0.5, size = 3) +
scale_x_discrete(limits = catOrder) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = colrs) +
labs(fill = '') +
ylab("Percentage") + xlab("Resource category") +
theme(legend.position = "bottom", legend.title = element_blank()) +
theme(text = element_text(family = "serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
})
# Group by category and calculate max harvests for use in percent calculations
harvUseFigData <- commHarvData %>%
group_by(projID, studyear, communty, catCode) %>%
mutate(
catHarvLbs = max(estHarvestLbs_sum, na.rm = TRUE),
catHarvAmt = max(estHarvestAmt_sum, na.rm = TRUE)
) %>%
ungroup() %>%
mutate(
pctCatByLbs = estHarvestLbs_sum / catHarvLbs,
pctCatByAmt = estHarvestAmt_sum / catHarvAmt,
# Furbearers will always be compared by individual harvests, because many are not eaten.
pctByCat = if_else(catCode == 22, pctCatByAmt, pctCatByLbs),
# Set a flag if the total contribution is between 0 and 1.5%, these
#   will be lumped into an 'other' category. This flag will help us
#   determine the number of these lumped species. If there is only 1 - no point
#   in aggregating as 'other'.
othIdx = if_else(pctByCat < 0.015 & pctByCat > 0, 1L, 0L)
) %>%
# Get a count of resources by category
group_by(projID, studyear, communty, catCode) %>%
mutate(othCount = sum(othIdx, na.rm = TRUE)) %>%
ungroup() %>%
# Drop the 0 harvests of individual species, they just muck-up the figure
#   - Leave in overall categories though, just for accounting purposes.
filter(pctByCat > 0 | specList != 1,
# Remove wood.
resource != 604000000)
# Helper function for vegetation lumping
veg_lump <- function(data, resource_range, name, code = NULL) {
data %>%
filter(resource %in% resource_range) %>%
mutate(
resource = min(resource_range),
resName = name,
specList = 1
)
}
# Special handling for vegetation, we'll lump into sub-categories to start:
#  Mushrooms, Berries, Other vegetation, seaweed, all other processing will work fine as below (I think).
# Seaweed into its own data frame for a minute
seaweedData <- veg_lump(harvUseFigData, resource_range = 603000000:(604000000 - 1), name = "Seaweed")
# Mushrooms into their own data frame.
mushroomData <- veg_lump(harvUseFigData, resource_range = c(602040000, 602046000, 602046010, 602046020, 602046030, 602046040), name = "Mushrooms")
# Berries into their own data frame.
berryData <- veg_lump(harvUseFigData, resource_range = 601000000:(602000000 - 1), name = "Berries")
# Other vegetation
otherPlantsData <- harvUseFigData %>%
filter(resource >= 602000000, resource < 603000000, !resource %in% c(602040000, 602046000, 602046010, 602046020, 602046030, 602046040)) %>%
mutate(
resource = 602000000,
resName = "Other plants and greens",
specList = 1
)
# Remove vegetation from the main dataset.
harvUseFigData_main <- harvUseFigData %>%
filter(resource < 600000000)
# break-out lumped species from those we want to split out.
lumpedSpecies1Data <- harvUseFigData_main %>%
filter(
pctByCat < 0.015,
(catCode < 30 | catCode == 43),
othCount > 1
) %>%
mutate(
resName = case_when(
catCode == 11 ~ "All other salmon",
catCode == 12 ~ "All other nonsalmon fishes",
catCode == 21 ~ "All other large land mammals",
catCode == 22 ~ "All other small land mammals",
catCode == 23 ~ "All other feral animals",
# catCode %in% c(41, 42, 43) ~ "All other birds and eggs",
catCode == 40 ~ "All other birds and eggs",
TRUE ~ "All other"
),
resource = (catCode * 10000000) + 9999999
)
lumpedSpecies2Data <- harvUseFigData_main %>%
filter(
pctByCat < 0.015,
(catCode >= 30 & catCode < 60 & catCode != 43),
othCount > 1
) %>%
mutate(
resName = case_when(
catCode == 30 ~ "All other marine mammals",
catCode == 50 ~ "All other marine invertebrates",
# catCode %in% c(41, 42, 43) ~ "All other birds and eggs",
catCode == 40 ~ "All other birds and eggs",
TRUE ~ "All other"
),
resource = (catCode * 10000000) + 99999999
)
splitSpeciesData <- harvUseFigData_main %>%
filter(pctByCat > 0.015 | othCount <= 1)
# Bring all of the data back together now.
harvUseFigData <- bind_rows(
seaweedData,
mushroomData,
berryData,
otherPlantsData,
lumpedSpecies1Data,
lumpedSpecies2Data,
splitSpeciesData
) %>%
group_by(projID, studyear, communty, commname, catCode, resource, resName) %>%
summarize(
estHarvestAmt_sum = sum(estHarvestAmt_sum, na.rm = TRUE),
estHarvestLbs_sum = sum(estHarvestLbs_sum, na.rm = TRUE),
percap = sum(percap, na.rm = TRUE),
.groups = "drop"
)
# Clean up species/resource names
harvUseFigData$resName <- str_trim(harvUseFigData$resName, side = "both")
for(comm in commnameList$commname)
{
tempData <- filter(harvUseFigData, catCode == 40 &
resource != 400000000 &
commname == comm)
if(nrow(tempData) > 100) {
tempData <- select(tempData, resName, percap, estHarvestLbs_sum) %>%
arrange(desc(percap))
tempData$order = seq(1, nrow(tempData))
tempData$order[tempData$order >= 10] = 10
tempData$resName[tempData$order == 10] = "All other species"
tempData <- tempData %>%
group_by(resName) %>%
summarise(percap = sum(percap, na.rm=TRUE),
estHarvestLbs_sum = sum(estHarvestLbs_sum, na.rm=TRUE)) %>%
ungroup()
}
if(nrow(tempData) > 0)
{
colrs <- getColors(nColors = nrow(tempData))
tempData <- arrange(tempData, percap)
tempData$resName = factor(tempData$resName, levels = rev(unique(tempData$resName)))
specPlot <- ggplot(tempData,
aes(x = "",
y = percap,
fill = resName)) +
ggtitle(str_interp("Bird harvest by species ${comm}, ${studyear}.")) +
geom_bar(width = 1,
stat = "identity",
color = "white") +
coord_polar("y",
start = 0,
direction = -1) +
xlab("") + ylab("") +
scale_fill_manual(values = colrs) +
theme_void() + theme(legend.title = element_blank()) +
theme(text=element_text(family="serif"))
print(specPlot)
} else {
cat(warningMessage(str_interp("No bird data present for ${comm}, ${studyear}")))
}
}
View(tempData)
View(harvUseFigData)
