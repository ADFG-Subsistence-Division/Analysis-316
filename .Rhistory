)
lumpedSpecies2Data <- harvUseFigData_main %>%
filter(
pctByCat < 0.015,
(catCode >= 30 & catCode < 60 & catCode != 43),
othCount > 1
) %>%
mutate(
resName = case_when(
catCode == 30 ~ "All other marine mammals",
catCode == 50 ~ "All other marine invertebrates",
catCode %in% c(41, 42, 43) ~ "All other birds and eggs",
TRUE ~ "All other"
),
resource = (catCode * 10000000) + 99999999
)
splitSpeciesData <- harvUseFigData_main %>%
filter(pctByCat > 0.015 | othCount <= 1)
# Bring all of the data back together now.
harvUseFigData <- bind_rows(
seaweedData,
mushroomData,
berryData,
otherPlantsData,
lumpedSpecies1Data,
lumpedSpecies2Data,
splitSpeciesData
) %>%
group_by(projID, studyear, communty, commname, catCode, resource, resName) %>%
summarize(
estHarvestAmt_sum = sum(estHarvestAmt_sum, na.rm = TRUE),
estHarvestLbs_sum = sum(estHarvestLbs_sum, na.rm = TRUE),
percap = sum(percap, na.rm = TRUE),
.groups = "drop"
)
# Clean up species/resource names
harvUseFigData$resName <- str_trim(harvUseFigData$resName, side = "both")
plot_species_pie <- function(data, comm, study_year, cat_code, resource_exclude,
title_prefix, yvar = "percap",
collapse_all_other = FALSE, n_collapse = 10) {
tempData <- dplyr::filter(data,
.data$catCode == cat_code,
.data$commname == comm,
.data$resource != resource_exclude)
# For certain categories, collapse all but top n species
if (collapse_all_other && nrow(tempData) > n_collapse) {
tempData <- dplyr::select(tempData, resName, percap, estHarvestLbs_sum) %>%
dplyr::arrange(desc(!!rlang::sym(yvar)))
tempData$order <- seq_len(nrow(tempData))
tempData$order[tempData$order >= n_collapse] <- n_collapse
tempData$resName[tempData$order == n_collapse] <- "All other species"
tempData <- tempData %>%
dplyr::group_by(resName) %>%
dplyr::summarise(percap = sum(percap, na.rm = TRUE),
estHarvestLbs_sum = sum(estHarvestLbs_sum, na.rm = TRUE)) %>%
dplyr::ungroup()
}
if (nrow(tempData) > 0) {
tempData <- dplyr::arrange(tempData, !!rlang::sym(yvar))
tempData$resName <- factor(tempData$resName, levels = rev(unique(tempData$resName)))
colrs <- getColors(nColors = nlevels(tempData$resName))
gg_title <- glue::glue("{title_prefix} {comm}, {study_year}.")
# Calculate percentage and cumulative position for labels
tempData <- tempData %>%
mutate(
percent = !!rlang::sym(yvar) / sum(!!rlang::sym(yvar), na.rm = TRUE),
percent_label = paste0(round(percent * 100, 1), "%"),
ymax = cumsum(!!rlang::sym(yvar)),
ymin = lag(ymax, default = 0),
ymid = (ymax + ymin) / 2,
x = 1,
label = percent_label
)
specPlot <- ggplot(tempData,
aes(x = "", y = !!rlang::sym(yvar), fill = resName)) +
ggtitle(gg_title) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0, direction = -1) +
xlab("") + ylab("") +
scale_fill_manual(values = colrs) +
theme_void() +
theme(legend.title = element_blank(),
text = element_text(family = "serif")) +
ggrepel::geom_label_repel(
aes(x = x, y = ymid, label = label),
nudge_x = 1,
show.legend = FALSE,
size = 4,
color = "black",
segment.color = "grey30",
segment.size = 0.5,
box.padding = 0.2,
point.padding = 0.4,
direction = "y",
seed = 123
)
return(specPlot)
} else {
cat(warningMessage(glue::glue("No {tolower(title_prefix)} data present for {comm}, {study_year}")))
return(NULL)
}
}
# List of plots to make, specifying unique settings for each
pie_plot_settings <- tibble::tribble(
~plot_group,        ~cat_code, ~resource_exclude, ~title_prefix,                    ~yvar,              ~collapse_all_other, ~n_collapse,
"salmon",           11,       110000000,         "Salmon harvest by species",      "percap",           FALSE,               NA,
"non_salmon_fish",  12,       120000000,         "Non-salmon harvest by species",  "percap",           TRUE,                10,
"large_game",       21,       210000000,         "Large land mammal harvest by species", "percap",    FALSE,               NA,
"small_game",       22,       220000000,         "Small land mammal harvest by species", "estHarvestAmt_sum", FALSE,         NA,
"feral_game",       23,       230000000,         "Feral land mammal harvest by species", "percap",    FALSE,               NA,
"marine_mammals",   30,       300000000,         "Marine mammal harvest by species", "percap",         FALSE,               NA,
"birds",            40,       400000000,         "Bird harvest by species",        "percap",           TRUE,                10,
"marine_invert",    50,       500000000,         "Marine invertebrate harvest by species", "percap",   FALSE,               NA,
"vegetation",       60,       600000000,         "Vegetation harvest by species",  "percap",           FALSE,               NA
)
# Get all combinations of plot_group and comm
plot_combos <- expand.grid(
plot_group = pie_plot_settings$plot_group,
comm = commnameList,
studyear = studyearList,
stringsAsFactors = FALSE
)
# Join the settings onto plot_combos
combo_settings <- left_join(plot_combos, pie_plot_settings, by = "plot_group")
View(plot_combos)
View(plot_combos)
commnameList
studyearList
commnameList <- harvRawData %>% distinct(commname) %>% pull(commname)
commnameList <- harvRawData %>% distinct(commname) %>% pull(commname)
studyearList <- harvRawData %>% select(studyear) %>% distinct(studyear) %>% pull(studyear)
walk(commnameList, function(comm) {
tempData <- harvRawData %>%
filter(commname == comm) %>%
select(resName, used_pct, attempt_pct, harvestq_pct, received_pct,
giveaway_pct, estHarvestLbs_sum, harvestLbs_mean, percap,
estHarvestAmt_sum, units, harvestAmt_mean, CIP_Lbs, CIP_Amt, specList) %>%
mutate(
CIP = if_else(units == "lb", CIP_Lbs, CIP_Amt),
used_pct = round(used_pct * 100, 1),
attempt_pct = round(attempt_pct * 100, 1),
harvestq_pct = round(harvestq_pct * 100, 1),
received_pct = round(received_pct * 100, 1),
giveaway_pct = round(giveaway_pct * 100, 1),
estHarvestLbs_sum = round(estHarvestLbs_sum, 1),
harvestLbs_mean = round(harvestLbs_mean, 1),
percap = round(percap, 1),
estHarvestAmt_sum = round(estHarvestAmt_sum, 1),
harvestAmt_mean = round(harvestAmt_mean, 1),
CIP = round(CIP * 100, 1)
) %>%
select(-CIP_Lbs, -CIP_Amt)
indentList <- which(tempData$specList == 1)
boldList <- which(tempData$specList == 2)
tempData <- select(tempData, -specList)
studyear <- unique(harvRawData$studyear[harvRawData$commname == comm])
tblOut <- kbl(
tempData,
caption = formatTableHeader(str_interp("Harvest and use table for: ${comm}, ${studyear}")),
col.names = c(
"Resource", "Use %", "Attempt %", "Harvest %", "Receive %", "Gave %",
"Total", "Mean per household", "Per capita", "Total", "Unit",
"Mean per household", "CI 95% +-"
)
) %>%
kable_styling(full_width = FALSE) %>%
add_indent(indentList) %>%
row_spec(boldList, bold = TRUE, hline_after = FALSE) %>%
add_header_above(c(
"  " = 1, "Percentage of households" = 5, "Harvest weight (lbs)" = 3,
"Harvest amount" = 3, "  " = 1
))
print(tblOut)
})
harvUseCatData <- harvRawData %>%
filter(specList == 2) %>%
select(projID, studyear, communty, commname, resource, resName,
used_pct, attempt_pct, harvestq_pct, estHarvestAmt_sum, estHarvestLbs_sum, percap)
walk(commnameList, function(comm) {
# Table 1: Harvest by category
tempData <- harvUseCatData %>%
filter(commname == comm) %>%
arrange(resource) %>%
select(resName, estHarvestLbs_sum, percap) %>%
mutate(
estHarvestLbs_sum = round(estHarvestLbs_sum, 1),
percap = round(percap, 1)
)
tblOut <- kbl(
tempData,
caption = formatTableHeader(str_interp("Harvest by category for ${comm}, ${unique(harvUseCatData$studyear[harvUseCatData$commname == comm])}")),
col.names = c("Resource", "Total", "Per capita")
) %>%
kable_styling(full_width = FALSE) %>%
add_header_above(c("  " = 1, "Harvest in pounds usable weight" = 2))
print(tblOut)
pieData <- tempData %>%
filter(resName != 'All resources', percap > 0) %>%
arrange(percap) %>%
mutate(resName = factor(resName, levels = rev(unique(resName))))
# Get colors (use your existing function or any palette)
colrs <- getColors(nColors = nrow(pieData))
# Create labels: "Resource; XX%"
labels <- paste0(pieData$resName, "; ", round(pieData$percap / sum(pieData$percap) * 100), "%")
# Draw the pie chart using base R
catPlot <- pie(
pieData$percap,
labels = labels,
col = colrs,
main = str_interp("Harvest by category for ${comm}, ${unique(harvUseCatData$studyear[harvUseCatData$commname == comm])}"),
font.main = 1,
family = "serif",
cex = 0.8
)
catPlot
# Bar plot: Use, attempt, and harvest by resource category
tempCatData <- harvUseCatData %>%
filter(commname == comm, resource != 0) %>%
arrange(resource) %>%
select(resName, used_pct, attempt_pct, harvestq_pct)
count <- nrow(tempCatData)
plotData <- tibble(
category = rep(tempCatData$resName, 3),
label = rep(c("using", "attempting", "harvesting"), each = count),
useVar = c(tempCatData$used_pct, tempCatData$attempt_pct, tempCatData$harvestq_pct)
) %>%
mutate(
category = str_wrap(category, width = 10)
)
labelOrder <- c("using", "attempting", "harvesting")
catOrder <- plotData %>% distinct(category) %>% pull(category)
colrs <- getColors(nColors = 3)
plotOut <- ggplot(plotData, aes(
fill = factor(label, labelOrder),
y = useVar,
x = category,
label = scales::percent(useVar)
)) +
ggtitle(str_interp("Use, attempt, and harvest by resource category, ${comm}, ${unique(harvUseCatData$studyear[harvUseCatData$commname == comm])}")) +
geom_bar(position = position_dodge(width = 0.5), stat = "identity") +
geom_text(position = position_dodge(width = 0.5), vjust = -0.5, size = 3) +
scale_x_discrete(limits = catOrder) +
scale_y_continuous(labels = scales::percent) +
scale_fill_manual(values = colrs) +
labs(fill = '') +
ylab("Percentage") + xlab("Resource category") +
theme(legend.position = "bottom", legend.title = element_blank()) +
theme(text = element_text(family = "serif")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
print(plotOut)
})
# Group by category and calculate max harvests for use in percent calculations
harvUseFigData <- commHarvData %>%
group_by(projID, studyear, communty, catCode) %>%
mutate(
catHarvLbs = max(estHarvestLbs_sum, na.rm = TRUE),
catHarvAmt = max(estHarvestAmt_sum, na.rm = TRUE)
) %>%
ungroup() %>%
mutate(
pctCatByLbs = estHarvestLbs_sum / catHarvLbs,
pctCatByAmt = estHarvestAmt_sum / catHarvAmt,
# Furbearers will always be compared by individual harvests, because many are not eaten.
pctByCat = if_else(catCode == 22, pctCatByAmt, pctCatByLbs),
# Set a flag if the total contribution is between 0 and 1.5%, these
#   will be lumped into an 'other' category. This flag will help us
#   determine the number of these lumped species. If there is only 1 - no point
#   in aggregating as 'other'.
othIdx = if_else(pctByCat < 0.015 & pctByCat > 0, 1L, 0L)
) %>%
# Get a count of resources by category
group_by(projID, studyear, communty, catCode) %>%
mutate(othCount = sum(othIdx, na.rm = TRUE)) %>%
ungroup() %>%
# Drop the 0 harvests of individual species, they just muck-up the figure
#   - Leave in overall categories though, just for accounting purposes.
filter(pctByCat > 0 | specList != 1,
# Remove wood.
resource != 604000000)
# Helper function for vegetation lumping
veg_lump <- function(data, resource_range, name, code = NULL) {
data %>%
filter(resource %in% resource_range) %>%
mutate(
resource = min(resource_range),
resName = name,
specList = 1
)
}
# Special handling for vegetation, we'll lump into sub-categories to start:
#  Mushrooms, Berries, Other vegetation, seaweed, all other processing will work fine as below (I think).
# Seaweed into its own data frame for a minute
seaweedData <- veg_lump(harvUseFigData, resource_range = 603000000:(604000000 - 1), name = "Seaweed")
# Mushrooms into their own data frame.
mushroomData <- veg_lump(harvUseFigData, resource_range = c(602040000, 602046000, 602046010, 602046020, 602046030, 602046040), name = "Mushrooms")
# Berries into their own data frame.
berryData <- veg_lump(harvUseFigData, resource_range = 601000000:(602000000 - 1), name = "Berries")
# Other vegetation
otherPlantsData <- harvUseFigData %>%
filter(resource >= 602000000, resource < 603000000, !resource %in% c(602040000, 602046000, 602046010, 602046020, 602046030, 602046040)) %>%
mutate(
resource = 602000000,
resName = "Other plants and greens",
specList = 1
)
# Remove vegetation from the main dataset.
harvUseFigData_main <- harvUseFigData %>%
filter(resource < 600000000)
# break-out lumped species from those we want to split out.
lumpedSpecies1Data <- harvUseFigData_main %>%
filter(
pctByCat < 0.015,
(catCode < 30 | catCode == 43),
othCount > 1
) %>%
mutate(
resName = case_when(
catCode == 11 ~ "All other salmon",
catCode == 12 ~ "All other nonsalmon fishes",
catCode == 21 ~ "All other large land mammals",
catCode == 22 ~ "All other small land mammals",
catCode == 23 ~ "All other feral animals",
catCode %in% c(41, 42, 43) ~ "All other birds and eggs",
TRUE ~ "All other"
),
resource = (catCode * 10000000) + 9999999
)
lumpedSpecies2Data <- harvUseFigData_main %>%
filter(
pctByCat < 0.015,
(catCode >= 30 & catCode < 60 & catCode != 43),
othCount > 1
) %>%
mutate(
resName = case_when(
catCode == 30 ~ "All other marine mammals",
catCode == 50 ~ "All other marine invertebrates",
catCode %in% c(41, 42, 43) ~ "All other birds and eggs",
TRUE ~ "All other"
),
resource = (catCode * 10000000) + 99999999
)
splitSpeciesData <- harvUseFigData_main %>%
filter(pctByCat > 0.015 | othCount <= 1)
# Bring all of the data back together now.
harvUseFigData <- bind_rows(
seaweedData,
mushroomData,
berryData,
otherPlantsData,
lumpedSpecies1Data,
lumpedSpecies2Data,
splitSpeciesData
) %>%
group_by(projID, studyear, communty, commname, catCode, resource, resName) %>%
summarize(
estHarvestAmt_sum = sum(estHarvestAmt_sum, na.rm = TRUE),
estHarvestLbs_sum = sum(estHarvestLbs_sum, na.rm = TRUE),
percap = sum(percap, na.rm = TRUE),
.groups = "drop"
)
# Clean up species/resource names
harvUseFigData$resName <- str_trim(harvUseFigData$resName, side = "both")
# Helper function for pie plotting
plot_species_pie <- function(data, comm, study_year, cat_code, resource_exclude,
title_prefix, yvar = "percap",
collapse_all_other = FALSE, n_collapse = 10) {
tempData <- dplyr::filter(data,
.data$catCode == cat_code,
.data$commname == comm,
.data$resource != resource_exclude)
# For certain categories, collapse all but top n species
if (collapse_all_other && nrow(tempData) > n_collapse) {
tempData <- dplyr::select(tempData, resName, percap, estHarvestLbs_sum) %>%
dplyr::arrange(desc(!!rlang::sym(yvar)))
tempData$order <- seq_len(nrow(tempData))
tempData$order[tempData$order >= n_collapse] <- n_collapse
tempData$resName[tempData$order == n_collapse] <- "All other species"
tempData <- tempData %>%
dplyr::group_by(resName) %>%
dplyr::summarise(percap = sum(percap, na.rm = TRUE),
estHarvestLbs_sum = sum(estHarvestLbs_sum, na.rm = TRUE)) %>%
dplyr::ungroup()
}
if (nrow(tempData) > 0) {
tempData <- dplyr::arrange(tempData, !!rlang::sym(yvar))
tempData$resName <- factor(tempData$resName, levels = rev(unique(tempData$resName)))
colrs <- getColors(nColors = nlevels(tempData$resName))
gg_title <- glue::glue("{title_prefix} {comm}, {study_year}.")
# Calculate percentage and cumulative position for labels
tempData <- tempData %>%
mutate(
percent = !!rlang::sym(yvar) / sum(!!rlang::sym(yvar), na.rm = TRUE),
percent_label = paste0(round(percent * 100, 1), "%"),
ymax = cumsum(!!rlang::sym(yvar)),
ymin = lag(ymax, default = 0),
ymid = (ymax + ymin) / 2,
x = 1,
label = percent_label
)
specPlot <- ggplot(tempData,
aes(x = "", y = !!rlang::sym(yvar), fill = resName)) +
ggtitle(gg_title) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0, direction = -1) +
xlab("") + ylab("") +
scale_fill_manual(values = colrs) +
theme_void() +
theme(legend.title = element_blank(),
text = element_text(family = "serif")) +
ggrepel::geom_label_repel(
aes(x = x, y = ymid, label = label),
nudge_x = 1,
show.legend = FALSE,
size = 4,
color = "black",
segment.color = "grey30",
segment.size = 0.5,
box.padding = 0.2,
point.padding = 0.4,
direction = "y",
seed = 123
)
return(specPlot)
} else {
cat(warningMessage(glue::glue("No {tolower(title_prefix)} data present for {comm}, {study_year}")))
return(NULL)
}
}
# List of plots to make, specifying unique settings for each
pie_plot_settings <- tibble::tribble(
~plot_group,        ~cat_code, ~resource_exclude, ~title_prefix,                    ~yvar,              ~collapse_all_other, ~n_collapse,
"salmon",           11,       110000000,         "Salmon harvest by species",      "percap",           FALSE,               NA,
"non_salmon_fish",  12,       120000000,         "Non-salmon harvest by species",  "percap",           TRUE,                10,
"large_game",       21,       210000000,         "Large land mammal harvest by species", "percap",    FALSE,               NA,
"small_game",       22,       220000000,         "Small land mammal harvest by species", "estHarvestAmt_sum", FALSE,         NA,
"feral_game",       23,       230000000,         "Feral land mammal harvest by species", "percap",    FALSE,               NA,
"marine_mammals",   30,       300000000,         "Marine mammal harvest by species", "percap",         FALSE,               NA,
"birds",            40,       400000000,         "Bird harvest by species",        "percap",           TRUE,                10,
"marine_invert",    50,       500000000,         "Marine invertebrate harvest by species", "percap",   FALSE,               NA,
"vegetation",       60,       600000000,         "Vegetation harvest by species",  "percap",           FALSE,               NA
)
# Get all combinations of plot_group and comm
plot_combos <- expand.grid(
plot_group = pie_plot_settings$plot_group,
comm = commnameList,
studyear = studyearList,
stringsAsFactors = FALSE
)
# Join the settings onto plot_combos
combo_settings <- left_join(plot_combos, pie_plot_settings, by = "plot_group")
# For each, find the setting and call the plotting function
plot_list <- pmap(
combo_settings,
function(plot_group, comm, studyear, cat_code, resource_exclude, title_prefix, yvar, collapse_all_other, n_collapse, ...) {
plot_species_pie(
data = harvUseFigData,
comm = comm,
study_year = studyear,
cat_code = cat_code,
resource_exclude = resource_exclude,
title_prefix = title_prefix,
yvar = yvar,
collapse_all_other = collapse_all_other,
n_collapse = if (!is.na(n_collapse)) n_collapse else 10
)
}
)
# Name the list items for easy access
names(plot_list) <- paste0(
plot_combos$plot_group, "_",
plot_combos$comm, "_",
plot_combos$studyear, "_SpeciesPieFig"
)
# Plot for each community and group
# walk2(
#   rep(pie_plot_settings$plot_group, each = length(commnameList)),
#   rep(commnameList, times = nrow(pie_plot_settings)),
#   function(group, comm) {
#     setting <- pie_plot_settings %>% filter(.data$plot_group == group)
#     plot_species_pie(
#       data = harvUseFigData,
#       comm = comm,
#       study_year = studyear,
#       cat_code = setting$cat_code,
#       resource_exclude = setting$resource_exclude,
#       title_prefix = setting$title_prefix,
#       yvar = setting$yvar,
#       collapse_all_other = setting$collapse_all_other,
#       n_collapse = setting$n_collapse %||% 10
#     )
#   }
# )
pwalk(
unique(plot_combos[c("comm", "studyear")]),
function(comm, studyear) {
plot_name <- paste0("salmon", "_", comm, "_", studyear, "_SpeciesPieFig")
if (!is.null(plot_list[[plot_name]])) {
print(plot_list[[plot_name]])
}
}
)
pwalk(
unique(plot_combos[c("comm", "studyear")]),
function(comm, studyear) {
plot_name <- paste0("non_salmon_fish", "_", comm, "_", studyear, "_SpeciesPieFig")
if (!is.null(plot_list[[plot_name]])) {
print(plot_list[[plot_name]])
}
}
)
