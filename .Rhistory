# Compute variables and recode.
personData$personID = personData$person
# #################################################
# Standardize missing data codes.
# #################################################
count = length(personData$birthyear[personData$birthyear < 0])
if(is.null(count)) {count = 0}
personData$birthyear[personData$birthyear < 0] = NA
cat(formatSummaryBlock(paste("Missing person birth year recoded to NA, ",
count,
" records affected.", sep="")))
if(count / nrow(personData) == 0) {
cat(greenMessage("No birth year data is missing."))
}
if(count / nrow(personData) <= 0.05 & count & nrow(personData) > 0)
{
cat(warningMessage("Between 0 and 5% of person records had missing birth year, this is acceptable. Be sure to carefully evaluate person age output tables  for each community."))
}
if(count / nrow(personData) > 0.05 & count)
{
cat(warningMessage("More than 5% of person records had missing birth year, this requires attention. Please evaluate the missing data to ensure no systematic error or collection issue is present."))
}
personData$personAge = studyear - personData$birthyear
personData$personAge[is.na(personData$personAge)] = -8
personData$birthyear[is.na(personData$birthyear)]  = -8
cat(formatSummaryBlock("Missing person age and birth year information recoded to -8."))
count = nrow(personData$yrcomcat[is.na(personData$yrcomcat) | personData$yrcomcat == -9 | personData$yrcomcat == -7])
if(is.null(count)) {count = 0}
if(count / nrow(personData) == 0) {
cat(greenMessage("No length of residency (yrcomcat) data is missing."))
}
if(count / nrow(personData) <= 0.07 & count & nrow(personData) > 0)
{
cat(warningMessage("Between 0 and 7% of person records had missing length residency (yrcomcat), this is acceptable. Be sure to carefully evaluate length of residency output tables for each community."))
}
if(count / nrow(personData) > 0.07 & count)
{
cat(warningMessage("More than 7% of person records had missing length residency (yrcomcat), this requires attention. Please evaluate the missing data to ensure no systematic error or collection issue is present."))
}
personData <- personData %>%
mutate(yrcomcat = case_when(
is.na(yrcomcat) | yrcomcat %in% c(-9, -7) ~ -8,  # Recode missing values to -8
TRUE ~ yrcomcat  # Keep existing values for all other cases
))
cat(formatSummaryBlock(paste("Missing person length of residency (yrcomcat) recoded to -8, ",
count,
" records affected.", sep="")))
# Create a version of the person file containing sample information for
#       development of the demographics files.
personSampData <- left_join(personData, sampleData, by=c("projID","studyear","communty","strata"))
# Set some knit options and functions for formatting data.
knitr::opts_chunk$set(echo = FALSE,
include = TRUE,
message = FALSE,
warning = FALSE,
results='asis')
options(knitr.kable.NA = '')
# Clear out all existing variables & datasets.
rm(list=ls(all=TRUE))
library(knitr)
# Include the project parameters file - this needs to be updated for all
#   projects.
source('../Z00_PROJECT_PARAMETERS.r')
# Indicate record types to include in a list
recTypes = c("03", "04", "06", "08", "10", "12", "14", "15", "17")
recTypeDataSet = list()
# Note project information
cat(str_interp('<p class="rbn">Working on project ${projID} ${projectName} - ${studyear}</p>'))
# ##############################################################################
# Load data
# ##############################################################################
# All harvest records from database extract
recTypeDataSet <- recTypes %>%
set_names() %>%  # Name the list elements with the record types
map(function(recType) {
# Read and process the data
data <- read.csv(str_interp('../../CSV/01 - Database Extract/REC${recType}_raw.csv'),
na = '', header = TRUE, strip.white = TRUE) %>%
select(projID, studyear, communty, resource, units) %>%
group_by(projID, studyear, communty, resource, units) %>%
summarize(nOcc = n())
# Print the summary (side effect)
count <- nrow(data)
cat(formatSummaryBlock(paste0("Opening file: REC", recType, "_raw.csv, ",
count,
" resource/unit combinations found.")))
# Return the data
return(data)
})
# Resource code lookups.
rescodeData <- read.csv('../../CSV/00 - Lookup Codes/fullResList_raw.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(rescodeData)
cat(formatSummaryBlock(paste("Opening file: fullResList_raw.csv, ",
count,
" records loaded.", sep="")))
commListData <- read.csv('../../CSV/00 - Lookup Codes/fullCommuntyList.csv',
na = '', header = TRUE, strip.white = TRUE)
count <- nrow(commListData)
cat(formatSummaryBlock(paste("Opening file: fullCommuntyList.csv, ",
count,
" records loaded.", sep="")))
# Bind rows across all of the datasets.
allResData <- dplyr::bind_rows(recTypeDataSet)
# Merge in the resource codes & communty codes.
allResData <- left_join(allResData, rescodeData, by="resource") %>%
left_join(commListData) %>%
arrange(projID, studyear, communty, resource)
tempData <- select(allResData, projID, studyear, commname, resName, resource,
units, nOcc)
print(knitr::kable(tempData,
caption = formatTableHeader('Resource / units by communty & number of occurrences')))
View(allResData)
View(recTypeDataSet)
recTypeDataSet[[04]]
recTypeDataSet[["04"]]
View(rescodeData)
View(allResData)
# Set some knit options and functions for formatting data.
knitr::opts_chunk$set(echo = FALSE,
include = TRUE,
message = FALSE,
warning = FALSE,
results='asis')
options(knitr.kable.NA = '')
# Clear out all existing variables & datasets.
rm(list=ls(all=TRUE))
library(knitr)
# Include the project parameters file - this needs to be updated for all
#   projects.
source('../Z00_PROJECT_PARAMETERS.r')
# Indicate record types to include in a list
recTypes = c("03", "04", "06", "08", "10", "12", "14", "15", "17")
recTypeDataSet = list()
# Note project information
cat(str_interp('<p class="rbn">Working on project ${projID} ${projectName} - ${studyear}</p>'))
# ##############################################################################
# Load data
# ##############################################################################
# All harvest records from database extract
recTypeDataSet <- recTypes %>%
set_names() %>%  # Name the list elements with the record types
map(function(recType) {
# Read and process the data
data <- read.csv(str_interp('../../CSV/01 - Database Extract/REC${recType}_raw.csv'),
na = '', header = TRUE, strip.white = TRUE)
# This block keeps `harvestq`/`keepResourceYN` columns for filtering later in
# Excel.
if("keepResourceYN" %in% names(data)) {
data <- rename(data, harvestq = keepResourceYN) %>%
mutate(used = if_else(harvestq == 1 | incidentalYN == 1, 1, 0))
}
data <- data %>%
select(projID, studyear, communty, resource, units, harvestq, used) %>%
group_by(projID, studyear, communty, resource, units, harvestq, used) %>%
summarize(nOcc = n(), .groups = "drop")
# Print the summary (side effect)
count <- nrow(data)
cat(formatSummaryBlock(paste0("Opening file: REC", recType, "_raw.csv, ",
count,
" resource/unit combinations found.")))
# Return the data
return(data)
})
# Resource code lookups.
rescodeData <- read.csv('../../CSV/00 - Lookup Codes/fullResList_raw.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(rescodeData)
cat(formatSummaryBlock(paste("Opening file: fullResList_raw.csv, ",
count,
" records loaded.", sep="")))
commListData <- read.csv('../../CSV/00 - Lookup Codes/fullCommuntyList.csv',
na = '', header = TRUE, strip.white = TRUE)
count <- nrow(commListData)
cat(formatSummaryBlock(paste("Opening file: fullCommuntyList.csv, ",
count,
" records loaded.", sep="")))
# Bind rows across all of the datasets.
allResData <- dplyr::bind_rows(recTypeDataSet)
View(allResData)
# Merge in the resource codes & communty codes.
allResData <- left_join(allResData, rescodeData, by="resource") %>%
left_join(commListData) %>%
arrange(projID, studyear, communty, resource)
tempData <- select(allResData, projID, studyear, commname, resName, resource,
units, nOcc, harvestq, used)
print(knitr::kable(tempData,
caption = formatTableHeader('Resource / units by communty & number of occurrences')))
# Create empty columns for the convFact data file.
allResData$convFact = 1
allResData$lbsToDefault = 1
allResData$defaultUnits = allResData$units
allResData$Source = "NONE"
allResData <- select(allResData, projID, studyear, communty, resName, resource,
units, convFact, lbsToDefault, defaultUnits,
Source, nOcc, harvestq, used)
count = nrow(allResData)
cat(greenMessage(str_interp("Final file prepped for output: ${count} rows.")))
# Write out conversion factor prep file.
fName = '../../CSV/01 - Database Extract/convFactPrep.csv'
cat(formatSummaryBlock(
paste('Writing file: ', fName,
' ', nrow(allResData), ' records to be written', sep='')))
rio::export(allResData, fName)
# Set some knit options and functions for formatting data.
knitr::opts_chunk$set(echo = FALSE,
include = TRUE,
message = FALSE,
warning = FALSE,
results='asis')
options(knitr.kable.NA = '')
# Clear out all existing variables & datasets.
rm(list=ls(all=TRUE))
library(knitr)
# Include the project parameters file - this needs to be updated for all
#   projects.
source('../Z00_PROJECT_PARAMETERS.r')
# Indicate record types to include in a list
recTypes = c("03", "04", "06", "08", "10", "12", "14", "15", "17")
recTypeDataSet = list()
# Note project information
cat(str_interp('<p class="rbn">Working on project ${projID} ${projectName} - ${studyear}</p>'))
# ##############################################################################
# Load data
# ##############################################################################
# All harvest records from database extract
recTypeDataSet <- recTypes %>%
set_names() %>%  # Name the list elements with the record types
map(function(recType) {
# Read and process the data
data <- read.csv(str_interp('../../CSV/01 - Database Extract/REC${recType}_raw.csv'),
na = '', header = TRUE, strip.white = TRUE)
# This block keeps `harvestq`/`keepResourceYN` columns for filtering later in
# Excel.
if("keepResourceYN" %in% names(data)) {
data <- rename(data, harvestq = keepResourceYN) %>%
mutate(used = if_else(harvestq == 1 | incidentalYN == 1, 1, 0))
}
data <- data %>%
select(projID, studyear, communty, resource, units, harvestq, used) %>%
group_by(projID, studyear, communty, resource, units, harvestq, used) %>%
summarize(nOcc = n(), .groups = "drop")
# Print the summary (side effect)
count <- nrow(data)
cat(formatSummaryBlock(paste0("Opening file: REC", recType, "_raw.csv, ",
count,
" resource/unit combinations found.")))
# Return the data
return(data)
})
# Resource code lookups.
rescodeData <- read.csv('../../CSV/00 - Lookup Codes/fullResList_raw.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(rescodeData)
cat(formatSummaryBlock(paste("Opening file: fullResList_raw.csv, ",
count,
" records loaded.", sep="")))
commListData <- read.csv('../../CSV/00 - Lookup Codes/fullCommuntyList.csv',
na = '', header = TRUE, strip.white = TRUE)
count <- nrow(commListData)
cat(formatSummaryBlock(paste("Opening file: fullCommuntyList.csv, ",
count,
" records loaded.", sep="")))
# Bind rows across all of the datasets.
allResData <- dplyr::bind_rows(recTypeDataSet)
View(allResData)
# Set some knit options and functions for formatting data.
knitr::opts_chunk$set(echo = FALSE,
include = TRUE,
message = FALSE,
warning = FALSE,
results='asis')
options(knitr.kable.NA = '')
# Clear out all existing variables & datasets.
rm(list=ls(all=TRUE))
library(knitr)
# Include the project parameters file - this needs to be updated for all
#   projects.
source('../Z00_PROJECT_PARAMETERS.r')
# Indicate record types to include in a list
recTypes = c("03", "04", "06", "08", "10", "12", "14", "15", "17")
recTypeDataSet = list()
# Note project information
cat(str_interp('<p class="rbn">Working on project ${projID} ${projectName} - ${studyear}</p>'))
# ##############################################################################
# Load data
# ##############################################################################
# All harvest records from database extract
recTypeDataSet <- recTypes %>%
set_names() %>%  # Name the list elements with the record types
map(function(recType) {
# Read and process the data
data <- read.csv(str_interp('../../CSV/01 - Database Extract/REC${recType}_raw.csv'),
na = '', header = TRUE, strip.white = TRUE)
# This block keeps `harvestq`/`keepResourceYN` columns for filtering later in
# Excel.
if("keepResourceYN" %in% names(data)) {
data <- rename(data, harvestq = keepResourceYN) %>%
mutate(used = if_else(harvestq == 1 | incidentalYN == 1, 1, 0))
}
data <- data %>%
select(projID, studyear, communty, resource, units, harvestq, used) %>%
group_by(projID, studyear, communty, resource, units, harvestq, used) %>%
summarize(nOcc = n(),
harvestq = max(harvestq),
used = max(used),
.groups = "drop")
# Print the summary (side effect)
count <- nrow(data)
cat(formatSummaryBlock(paste0("Opening file: REC", recType, "_raw.csv, ",
count,
" resource/unit combinations found.")))
# Return the data
return(data)
})
# Resource code lookups.
rescodeData <- read.csv('../../CSV/00 - Lookup Codes/fullResList_raw.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(rescodeData)
cat(formatSummaryBlock(paste("Opening file: fullResList_raw.csv, ",
count,
" records loaded.", sep="")))
commListData <- read.csv('../../CSV/00 - Lookup Codes/fullCommuntyList.csv',
na = '', header = TRUE, strip.white = TRUE)
count <- nrow(commListData)
cat(formatSummaryBlock(paste("Opening file: fullCommuntyList.csv, ",
count,
" records loaded.", sep="")))
# Bind rows across all of the datasets.
allResData <- dplyr::bind_rows(recTypeDataSet)
View(allResData)
# Set some knit options and functions for formatting data.
knitr::opts_chunk$set(echo = FALSE,
include = TRUE,
message = FALSE,
warning = FALSE,
results='asis')
options(knitr.kable.NA = '')
# Clear out all existing variables & datasets.
rm(list=ls(all=TRUE))
library(knitr)
# Include the project parameters file - this needs to be updated for all
#   projects.
source('../Z00_PROJECT_PARAMETERS.r')
# Indicate record types to include in a list
recTypes = c("03", "04", "06", "08", "10", "12", "14", "15", "17")
recTypeDataSet = list()
# Note project information
cat(str_interp('<p class="rbn">Working on project ${projID} ${projectName} - ${studyear}</p>'))
# ##############################################################################
# Load data
# ##############################################################################
# All harvest records from database extract
recTypeDataSet <- recTypes %>%
set_names() %>%  # Name the list elements with the record types
map(function(recType) {
# Read and process the data
data <- read.csv(str_interp('../../CSV/01 - Database Extract/REC${recType}_raw.csv'),
na = '', header = TRUE, strip.white = TRUE)
# This block keeps `harvestq`/`keepResourceYN` columns for filtering later in
# Excel.
if("keepResourceYN" %in% names(data)) {
data <- rename(data, harvestq = keepResourceYN) %>%
mutate(used = if_else(harvestq == 1 | incidentalYN == 1, 1, 0))
}
data <- data %>%
select(projID, studyear, communty, resource, units, harvestq, used)
# Print the summary (side effect)
count <- nrow(data)
cat(formatSummaryBlock(paste0("Opening file: REC", recType, "_raw.csv, ",
count,
" resource/unit combinations found.")))
# Return the data
return(data)
})
# Resource code lookups.
rescodeData <- read.csv('../../CSV/00 - Lookup Codes/fullResList_raw.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(rescodeData)
cat(formatSummaryBlock(paste("Opening file: fullResList_raw.csv, ",
count,
" records loaded.", sep="")))
commListData <- read.csv('../../CSV/00 - Lookup Codes/fullCommuntyList.csv',
na = '', header = TRUE, strip.white = TRUE)
count <- nrow(commListData)
cat(formatSummaryBlock(paste("Opening file: fullCommuntyList.csv, ",
count,
" records loaded.", sep="")))
# Bind rows across all of the datasets.
allResData <- dplyr::bind_rows(recTypeDataSet) %>%
group_by(projID, studyear, communty, resource, units, harvestq, used) %>%
summarize(nOcc = n(),
harvestq = max(harvestq),
used = max(used),
.groups = "drop")
View(allResData)
# Bind rows across all of the datasets.
allResData <- dplyr::bind_rows(recTypeDataSet) %>%
group_by(projID, studyear, communty, resource, units) %>%
summarize(nOcc = n(),
harvestq = max(harvestq),
used = max(used),
.groups = "drop")
# Merge in the resource codes & communty codes.
allResData <- left_join(allResData, rescodeData, by="resource") %>%
left_join(commListData) %>%
arrange(projID, studyear, communty, resource)
tempData <- select(allResData, projID, studyear, commname, resName, resource,
units, nOcc, harvestq, used)
print(knitr::kable(tempData,
caption = formatTableHeader('Resource / units by communty & number of occurrences')))
# Set some knit options and functions for formatting data.
knitr::opts_chunk$set(echo = FALSE,
include = TRUE,
message = FALSE,
warning = FALSE,
results='asis')
options(knitr.kable.NA = '')
# Clear out all existing variables & datasets.
rm(list=ls(all=TRUE))
library(knitr)
# Include the project parameters file - this needs to be updated for all
#   projects.
source('../Z00_PROJECT_PARAMETERS.r')
# Indicate record types to include in a list
recTypes = c("03", "04", "06", "08", "10", "12", "14", "15", "17")
recTypeDataSet = list()
# Note project information
cat(str_interp('<p class="rbn">Working on project ${projID} ${projectName} - ${studyear}</p>'))
# ##############################################################################
# Load data
# ##############################################################################
# All harvest records from database extract
recTypeDataSet <- recTypes %>%
set_names() %>%  # Name the list elements with the record types
map(function(recType) {
# Read and process the data
data <- read.csv(str_interp('../../CSV/01 - Database Extract/REC${recType}_raw.csv'),
na = '', header = TRUE, strip.white = TRUE)
# This block keeps `harvestq`/`keepResourceYN` columns for filtering later in
# Excel.
if("keepResourceYN" %in% names(data)) {
data <- rename(data, harvestq = keepResourceYN) %>%
mutate(used = if_else(harvestq == 1 | incidentalYN == 1, 1, 0))
}
data <- data %>%
select(projID, studyear, communty, resource, units, harvestq, used)
# Print the summary (side effect)
count <- nrow(data)
cat(formatSummaryBlock(paste0("Opening file: REC", recType, "_raw.csv, ",
count,
" resource/unit combinations found.")))
# Return the data
return(data)
})
# Resource code lookups.
rescodeData <- read.csv('../../CSV/00 - Lookup Codes/fullResList_raw.csv',
na = '',
header = TRUE,
strip.white = TRUE)
count <- nrow(rescodeData)
cat(formatSummaryBlock(paste("Opening file: fullResList_raw.csv, ",
count,
" records loaded.", sep="")))
commListData <- read.csv('../../CSV/00 - Lookup Codes/fullCommuntyList.csv',
na = '', header = TRUE, strip.white = TRUE)
count <- nrow(commListData)
cat(formatSummaryBlock(paste("Opening file: fullCommuntyList.csv, ",
count,
" records loaded.", sep="")))
# Bind rows across all of the datasets.
allResData <- dplyr::bind_rows(recTypeDataSet) %>%
group_by(projID, studyear, communty, resource, units) %>%
summarize(nOcc = n(),
harvestq = max(harvestq),
used = max(used),
.groups = "drop")
# Merge in the resource codes & communty codes.
allResData <- left_join(allResData, rescodeData, by="resource") %>%
left_join(commListData) %>%
arrange(projID, studyear, communty, resource)
tempData <- select(allResData, projID, studyear, commname, resName, resource,
units, nOcc, harvestq, used)
print(knitr::kable(tempData,
caption = formatTableHeader('Resource / units by communty & number of occurrences')))
# Create empty columns for the convFact data file.
allResData$convFact = 1
allResData$lbsToDefault = 1
allResData$defaultUnits = allResData$units
allResData$Source = "NONE"
allResData <- select(allResData, projID, studyear, communty, resName, resource,
units, convFact, lbsToDefault, defaultUnits,
Source, nOcc, harvestq, used)
count = nrow(allResData)
cat(greenMessage(str_interp("Final file prepped for output: ${count} rows.")))
# Write out conversion factor prep file.
fName = '../../CSV/01 - Database Extract/convFactPrep.csv'
cat(formatSummaryBlock(
paste('Writing file: ', fName,
' ', nrow(allResData), ' records to be written', sep='')))
rio::export(allResData, fName)
adfgSubs::getSubsStratifiedSurveyEstimate
